// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: activity.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace ActivityV2 {

  #region Messages
  public sealed class ActivityInfo : pb::IMessage {
    private static readonly pb::MessageParser<ActivityInfo> _parser = new pb::MessageParser<ActivityInfo>(() => new ActivityInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ActivityInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "goalInfo" field.</summary>
    public const int GoalInfoFieldNumber = 1;
    private static readonly pb::FieldCodec<global::ActivityV2.GoalInfo> _repeated_goalInfo_codec
        = pb::FieldCodec.ForMessage(10, global::ActivityV2.GoalInfo.Parser);
    private readonly pbc::RepeatedField<global::ActivityV2.GoalInfo> goalInfo_ = new pbc::RepeatedField<global::ActivityV2.GoalInfo>();
    /// <summary>
    ///目标数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ActivityV2.GoalInfo> GoalInfo {
      get { return goalInfo_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      goalInfo_.WriteTo(output, _repeated_goalInfo_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += goalInfo_.CalculateSize(_repeated_goalInfo_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            goalInfo_.AddEntriesFrom(input, _repeated_goalInfo_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class GoalInfo : pb::IMessage {
    private static readonly pb::MessageParser<GoalInfo> _parser = new pb::MessageParser<GoalInfo>(() => new GoalInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GoalInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "activityId" field.</summary>
    public const int ActivityIdFieldNumber = 1;
    private int activityId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ActivityId {
      get { return activityId_; }
      set {
        activityId_ = value;
      }
    }

    /// <summary>Field number for the "goalType" field.</summary>
    public const int GoalTypeFieldNumber = 2;
    private int goalType_;
    /// <summary>
    ///目标类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GoalType {
      get { return goalType_; }
      set {
        goalType_ = value;
      }
    }

    /// <summary>Field number for the "goal" field.</summary>
    public const int GoalFieldNumber = 3;
    private int goal_;
    /// <summary>
    ///目标id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Goal {
      get { return goal_; }
      set {
        goal_ = value;
      }
    }

    /// <summary>Field number for the "rewardState" field.</summary>
    public const int RewardStateFieldNumber = 4;
    private int rewardState_;
    /// <summary>
    ///是否领取过:0未领取 1可领取 2已领取
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RewardState {
      get { return rewardState_; }
      set {
        rewardState_ = value;
      }
    }

    /// <summary>Field number for the "leftCount" field.</summary>
    public const int LeftCountFieldNumber = 5;
    private int leftCount_;
    /// <summary>
    ///剩余可领个数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LeftCount {
      get { return leftCount_; }
      set {
        leftCount_ = value;
      }
    }

    /// <summary>Field number for the "now" field.</summary>
    public const int NowFieldNumber = 6;
    private int now_;
    /// <summary>
    ///当前进度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Now {
      get { return now_; }
      set {
        now_ = value;
      }
    }

    /// <summary>Field number for the "total" field.</summary>
    public const int TotalFieldNumber = 7;
    private int total_;
    /// <summary>
    ///总进度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Total {
      get { return total_; }
      set {
        total_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ActivityId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ActivityId);
      }
      if (GoalType != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(GoalType);
      }
      if (Goal != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Goal);
      }
      if (RewardState != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(RewardState);
      }
      if (LeftCount != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(LeftCount);
      }
      if (Now != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Now);
      }
      if (Total != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Total);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ActivityId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ActivityId);
      }
      if (GoalType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GoalType);
      }
      if (Goal != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Goal);
      }
      if (RewardState != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RewardState);
      }
      if (LeftCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LeftCount);
      }
      if (Now != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Now);
      }
      if (Total != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Total);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ActivityId = input.ReadInt32();
            break;
          }
          case 16: {
            GoalType = input.ReadInt32();
            break;
          }
          case 24: {
            Goal = input.ReadInt32();
            break;
          }
          case 32: {
            RewardState = input.ReadInt32();
            break;
          }
          case 40: {
            LeftCount = input.ReadInt32();
            break;
          }
          case 48: {
            Now = input.ReadInt32();
            break;
          }
          case 56: {
            Total = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///返回活动面板数据
  /// </summary>
  public sealed class ResOpenPanel : pb::IMessage {
    private static readonly pb::MessageParser<ResOpenPanel> _parser = new pb::MessageParser<ResOpenPanel>(() => new ResOpenPanel());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ResOpenPanel> Parser { get { return _parser; } }

    /// <summary>Field number for the "activityType" field.</summary>
    public const int ActivityTypeFieldNumber = 1;
    private int activityType_;
    /// <summary>
    ///组id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ActivityType {
      get { return activityType_; }
      set {
        activityType_ = value;
      }
    }

    /// <summary>Field number for the "info" field.</summary>
    public const int InfoFieldNumber = 2;
    private global::ActivityV2.ActivityListInfo info_;
    /// <summary>
    ///活动数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ActivityV2.ActivityListInfo Info {
      get { return info_; }
      set {
        info_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ActivityType != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ActivityType);
      }
      if (info_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Info);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ActivityType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ActivityType);
      }
      if (info_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Info);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ActivityType = input.ReadInt32();
            break;
          }
          case 18: {
            if (info_ == null) {
              info_ = new global::ActivityV2.ActivityListInfo();
            }
            input.ReadMessage(info_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///活动列表数据
  /// </summary>
  public sealed class ActivityListInfo : pb::IMessage {
    private static readonly pb::MessageParser<ActivityListInfo> _parser = new pb::MessageParser<ActivityListInfo>(() => new ActivityListInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ActivityListInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "activityDataInfo" field.</summary>
    public const int ActivityDataInfoFieldNumber = 1;
    private static readonly pb::FieldCodec<global::ActivityV2.ActivityDataInfo> _repeated_activityDataInfo_codec
        = pb::FieldCodec.ForMessage(10, global::ActivityV2.ActivityDataInfo.Parser);
    private readonly pbc::RepeatedField<global::ActivityV2.ActivityDataInfo> activityDataInfo_ = new pbc::RepeatedField<global::ActivityV2.ActivityDataInfo>();
    /// <summary>
    ///目标数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ActivityV2.ActivityDataInfo> ActivityDataInfo {
      get { return activityDataInfo_; }
    }

    /// <summary>Field number for the "registerNum" field.</summary>
    public const int RegisterNumFieldNumber = 2;
    private int registerNum_;
    /// <summary>
    ///注册人数参数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RegisterNum {
      get { return registerNum_; }
      set {
        registerNum_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      activityDataInfo_.WriteTo(output, _repeated_activityDataInfo_codec);
      if (RegisterNum != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(RegisterNum);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += activityDataInfo_.CalculateSize(_repeated_activityDataInfo_codec);
      if (RegisterNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RegisterNum);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            activityDataInfo_.AddEntriesFrom(input, _repeated_activityDataInfo_codec);
            break;
          }
          case 16: {
            RegisterNum = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///活动数据
  /// </summary>
  public sealed class ActivityDataInfo : pb::IMessage {
    private static readonly pb::MessageParser<ActivityDataInfo> _parser = new pb::MessageParser<ActivityDataInfo>(() => new ActivityDataInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ActivityDataInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "activityId" field.</summary>
    public const int ActivityIdFieldNumber = 1;
    private int activityId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ActivityId {
      get { return activityId_; }
      set {
        activityId_ = value;
      }
    }

    /// <summary>Field number for the "leftCount" field.</summary>
    public const int LeftCountFieldNumber = 2;
    private int leftCount_;
    /// <summary>
    ///剩余可领个数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LeftCount {
      get { return leftCount_; }
      set {
        leftCount_ = value;
      }
    }

    /// <summary>Field number for the "roleGoalInfo" field.</summary>
    public const int RoleGoalInfoFieldNumber = 3;
    private global::ActivityV2.RoleActivityInfo roleGoalInfo_;
    /// <summary>
    ///个人活动数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ActivityV2.RoleActivityInfo RoleGoalInfo {
      get { return roleGoalInfo_; }
      set {
        roleGoalInfo_ = value;
      }
    }

    /// <summary>Field number for the "serverGoalInfo" field.</summary>
    public const int ServerGoalInfoFieldNumber = 4;
    private global::ActivityV2.ServerActivityInfo serverGoalInfo_;
    /// <summary>
    ///全服活动数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ActivityV2.ServerActivityInfo ServerGoalInfo {
      get { return serverGoalInfo_; }
      set {
        serverGoalInfo_ = value;
      }
    }

    /// <summary>Field number for the "dataType" field.</summary>
    public const int DataTypeFieldNumber = 5;
    private int dataType_;
    /// <summary>
    ///1:个人 2：全服 3： 先全服再个人
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DataType {
      get { return dataType_; }
      set {
        dataType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ActivityId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ActivityId);
      }
      if (LeftCount != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(LeftCount);
      }
      if (roleGoalInfo_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(RoleGoalInfo);
      }
      if (serverGoalInfo_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(ServerGoalInfo);
      }
      if (DataType != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(DataType);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ActivityId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ActivityId);
      }
      if (LeftCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LeftCount);
      }
      if (roleGoalInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RoleGoalInfo);
      }
      if (serverGoalInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ServerGoalInfo);
      }
      if (DataType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DataType);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ActivityId = input.ReadInt32();
            break;
          }
          case 16: {
            LeftCount = input.ReadInt32();
            break;
          }
          case 26: {
            if (roleGoalInfo_ == null) {
              roleGoalInfo_ = new global::ActivityV2.RoleActivityInfo();
            }
            input.ReadMessage(roleGoalInfo_);
            break;
          }
          case 34: {
            if (serverGoalInfo_ == null) {
              serverGoalInfo_ = new global::ActivityV2.ServerActivityInfo();
            }
            input.ReadMessage(serverGoalInfo_);
            break;
          }
          case 40: {
            DataType = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///个人目标数据
  /// </summary>
  public sealed class RoleGoalInfo : pb::IMessage {
    private static readonly pb::MessageParser<RoleGoalInfo> _parser = new pb::MessageParser<RoleGoalInfo>(() => new RoleGoalInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoleGoalInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "goalId" field.</summary>
    public const int GoalIdFieldNumber = 1;
    private int goalId_;
    /// <summary>
    ///活动目标ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GoalId {
      get { return goalId_; }
      set {
        goalId_ = value;
      }
    }

    /// <summary>Field number for the "ok" field.</summary>
    public const int OkFieldNumber = 2;
    private bool ok_;
    /// <summary>
    ///是否已经完成
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Ok {
      get { return ok_; }
      set {
        ok_ = value;
      }
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 3;
    private int count_;
    /// <summary>
    ///当前进度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GoalId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(GoalId);
      }
      if (Ok != false) {
        output.WriteRawTag(16);
        output.WriteBool(Ok);
      }
      if (Count != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Count);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GoalId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GoalId);
      }
      if (Ok != false) {
        size += 1 + 1;
      }
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Count);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            GoalId = input.ReadInt32();
            break;
          }
          case 16: {
            Ok = input.ReadBool();
            break;
          }
          case 24: {
            Count = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///个人活动数据
  /// </summary>
  public sealed class RoleActivityInfo : pb::IMessage {
    private static readonly pb::MessageParser<RoleActivityInfo> _parser = new pb::MessageParser<RoleActivityInfo>(() => new RoleActivityInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoleActivityInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "activityId" field.</summary>
    public const int ActivityIdFieldNumber = 1;
    private int activityId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ActivityId {
      get { return activityId_; }
      set {
        activityId_ = value;
      }
    }

    /// <summary>Field number for the "rewardState" field.</summary>
    public const int RewardStateFieldNumber = 2;
    private int rewardState_;
    /// <summary>
    ///是否领取过:0未领取 1可领取 2已领取
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RewardState {
      get { return rewardState_; }
      set {
        rewardState_ = value;
      }
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 3;
    private int count_;
    /// <summary>
    ///当前进度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 4;
    private int time_;
    /// <summary>
    ///参与时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    /// <summary>Field number for the "roleGoalInfos" field.</summary>
    public const int RoleGoalInfosFieldNumber = 5;
    private static readonly pb::FieldCodec<global::ActivityV2.RoleGoalInfo> _repeated_roleGoalInfos_codec
        = pb::FieldCodec.ForMessage(42, global::ActivityV2.RoleGoalInfo.Parser);
    private readonly pbc::RepeatedField<global::ActivityV2.RoleGoalInfo> roleGoalInfos_ = new pbc::RepeatedField<global::ActivityV2.RoleGoalInfo>();
    /// <summary>
    ///目标数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ActivityV2.RoleGoalInfo> RoleGoalInfos {
      get { return roleGoalInfos_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ActivityId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ActivityId);
      }
      if (RewardState != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(RewardState);
      }
      if (Count != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Count);
      }
      if (Time != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Time);
      }
      roleGoalInfos_.WriteTo(output, _repeated_roleGoalInfos_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ActivityId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ActivityId);
      }
      if (RewardState != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RewardState);
      }
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Count);
      }
      if (Time != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Time);
      }
      size += roleGoalInfos_.CalculateSize(_repeated_roleGoalInfos_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ActivityId = input.ReadInt32();
            break;
          }
          case 16: {
            RewardState = input.ReadInt32();
            break;
          }
          case 24: {
            Count = input.ReadInt32();
            break;
          }
          case 32: {
            Time = input.ReadInt32();
            break;
          }
          case 42: {
            roleGoalInfos_.AddEntriesFrom(input, _repeated_roleGoalInfos_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///全服目标数据
  /// </summary>
  public sealed class ServerGoalInfo : pb::IMessage {
    private static readonly pb::MessageParser<ServerGoalInfo> _parser = new pb::MessageParser<ServerGoalInfo>(() => new ServerGoalInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ServerGoalInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "goalId" field.</summary>
    public const int GoalIdFieldNumber = 1;
    private int goalId_;
    /// <summary>
    ///活动目标ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GoalId {
      get { return goalId_; }
      set {
        goalId_ = value;
      }
    }

    /// <summary>Field number for the "ok" field.</summary>
    public const int OkFieldNumber = 2;
    private bool ok_;
    /// <summary>
    ///是否已经完成
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Ok {
      get { return ok_; }
      set {
        ok_ = value;
      }
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 3;
    private int count_;
    /// <summary>
    ///当前进度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    /// <summary>Field number for the "no" field.</summary>
    public const int NoFieldNumber = 4;
    private int no_;
    /// <summary>
    ///完成的名次
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int No {
      get { return no_; }
      set {
        no_ = value;
      }
    }

    /// <summary>Field number for the "finishRoleId" field.</summary>
    public const int FinishRoleIdFieldNumber = 5;
    private long finishRoleId_;
    /// <summary>
    ///完成的角色,也是可以领取的角色
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long FinishRoleId {
      get { return finishRoleId_; }
      set {
        finishRoleId_ = value;
      }
    }

    /// <summary>Field number for the "finishName" field.</summary>
    public const int FinishNameFieldNumber = 6;
    private string finishName_ = "";
    /// <summary>
    ///完成的角色名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FinishName {
      get { return finishName_; }
      set {
        finishName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "award" field.</summary>
    public const int AwardFieldNumber = 7;
    private bool award_;
    /// <summary>
    ///是否已经领奖
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Award {
      get { return award_; }
      set {
        award_ = value;
      }
    }

    /// <summary>Field number for the "finishSex" field.</summary>
    public const int FinishSexFieldNumber = 8;
    private int finishSex_;
    /// <summary>
    ///完成的角色性别
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FinishSex {
      get { return finishSex_; }
      set {
        finishSex_ = value;
      }
    }

    /// <summary>Field number for the "finishCarrer" field.</summary>
    public const int FinishCarrerFieldNumber = 9;
    private int finishCarrer_;
    /// <summary>
    ///完成的角色职业
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FinishCarrer {
      get { return finishCarrer_; }
      set {
        finishCarrer_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GoalId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(GoalId);
      }
      if (Ok != false) {
        output.WriteRawTag(16);
        output.WriteBool(Ok);
      }
      if (Count != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Count);
      }
      if (No != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(No);
      }
      if (FinishRoleId != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(FinishRoleId);
      }
      if (FinishName.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(FinishName);
      }
      if (Award != false) {
        output.WriteRawTag(56);
        output.WriteBool(Award);
      }
      if (FinishSex != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(FinishSex);
      }
      if (FinishCarrer != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(FinishCarrer);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GoalId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GoalId);
      }
      if (Ok != false) {
        size += 1 + 1;
      }
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Count);
      }
      if (No != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(No);
      }
      if (FinishRoleId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(FinishRoleId);
      }
      if (FinishName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FinishName);
      }
      if (Award != false) {
        size += 1 + 1;
      }
      if (FinishSex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FinishSex);
      }
      if (FinishCarrer != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FinishCarrer);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            GoalId = input.ReadInt32();
            break;
          }
          case 16: {
            Ok = input.ReadBool();
            break;
          }
          case 24: {
            Count = input.ReadInt32();
            break;
          }
          case 32: {
            No = input.ReadInt32();
            break;
          }
          case 40: {
            FinishRoleId = input.ReadInt64();
            break;
          }
          case 50: {
            FinishName = input.ReadString();
            break;
          }
          case 56: {
            Award = input.ReadBool();
            break;
          }
          case 64: {
            FinishSex = input.ReadInt32();
            break;
          }
          case 72: {
            FinishCarrer = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///全服活动数据
  /// </summary>
  public sealed class ServerActivityInfo : pb::IMessage {
    private static readonly pb::MessageParser<ServerActivityInfo> _parser = new pb::MessageParser<ServerActivityInfo>(() => new ServerActivityInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ServerActivityInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "activityId" field.</summary>
    public const int ActivityIdFieldNumber = 1;
    private int activityId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ActivityId {
      get { return activityId_; }
      set {
        activityId_ = value;
      }
    }

    /// <summary>Field number for the "rewardState" field.</summary>
    public const int RewardStateFieldNumber = 2;
    private int rewardState_;
    /// <summary>
    ///是否领取过:0未领取 1可领取 2已领取
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RewardState {
      get { return rewardState_; }
      set {
        rewardState_ = value;
      }
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 3;
    private int count_;
    /// <summary>
    ///当前进度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 4;
    private int time_;
    /// <summary>
    ///参与时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    /// <summary>Field number for the "serverGoalInfos" field.</summary>
    public const int ServerGoalInfosFieldNumber = 5;
    private static readonly pb::FieldCodec<global::ActivityV2.ServerGoalInfo> _repeated_serverGoalInfos_codec
        = pb::FieldCodec.ForMessage(42, global::ActivityV2.ServerGoalInfo.Parser);
    private readonly pbc::RepeatedField<global::ActivityV2.ServerGoalInfo> serverGoalInfos_ = new pbc::RepeatedField<global::ActivityV2.ServerGoalInfo>();
    /// <summary>
    ///目标数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ActivityV2.ServerGoalInfo> ServerGoalInfos {
      get { return serverGoalInfos_; }
    }

    /// <summary>Field number for the "roleCanRewardGoalId" field.</summary>
    public const int RoleCanRewardGoalIdFieldNumber = 6;
    private static readonly pb::FieldCodec<int> _repeated_roleCanRewardGoalId_codec
        = pb::FieldCodec.ForInt32(50);
    private readonly pbc::RepeatedField<int> roleCanRewardGoalId_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///角色可以领取的goal id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> RoleCanRewardGoalId {
      get { return roleCanRewardGoalId_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ActivityId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ActivityId);
      }
      if (RewardState != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(RewardState);
      }
      if (Count != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Count);
      }
      if (Time != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Time);
      }
      serverGoalInfos_.WriteTo(output, _repeated_serverGoalInfos_codec);
      roleCanRewardGoalId_.WriteTo(output, _repeated_roleCanRewardGoalId_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ActivityId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ActivityId);
      }
      if (RewardState != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RewardState);
      }
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Count);
      }
      if (Time != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Time);
      }
      size += serverGoalInfos_.CalculateSize(_repeated_serverGoalInfos_codec);
      size += roleCanRewardGoalId_.CalculateSize(_repeated_roleCanRewardGoalId_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ActivityId = input.ReadInt32();
            break;
          }
          case 16: {
            RewardState = input.ReadInt32();
            break;
          }
          case 24: {
            Count = input.ReadInt32();
            break;
          }
          case 32: {
            Time = input.ReadInt32();
            break;
          }
          case 42: {
            serverGoalInfos_.AddEntriesFrom(input, _repeated_serverGoalInfos_codec);
            break;
          }
          case 50:
          case 48: {
            roleCanRewardGoalId_.AddEntriesFrom(input, _repeated_roleCanRewardGoalId_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class RecycleHistory : pb::IMessage {
    private static readonly pb::MessageParser<RecycleHistory> _parser = new pb::MessageParser<RecycleHistory>(() => new RecycleHistory());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RecycleHistory> Parser { get { return _parser; } }

    /// <summary>Field number for the "info" field.</summary>
    public const int InfoFieldNumber = 1;
    private static readonly pb::FieldCodec<global::ActivityV2.RecycleHistoryInfo> _repeated_info_codec
        = pb::FieldCodec.ForMessage(10, global::ActivityV2.RecycleHistoryInfo.Parser);
    private readonly pbc::RepeatedField<global::ActivityV2.RecycleHistoryInfo> info_ = new pbc::RepeatedField<global::ActivityV2.RecycleHistoryInfo>();
    /// <summary>
    ///回收信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ActivityV2.RecycleHistoryInfo> Info {
      get { return info_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      info_.WriteTo(output, _repeated_info_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += info_.CalculateSize(_repeated_info_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            info_.AddEntriesFrom(input, _repeated_info_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class RecycleHistoryInfo : pb::IMessage {
    private static readonly pb::MessageParser<RecycleHistoryInfo> _parser = new pb::MessageParser<RecycleHistoryInfo>(() => new RecycleHistoryInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RecycleHistoryInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "itemId" field.</summary>
    public const int ItemIdFieldNumber = 1;
    private int itemId_;
    /// <summary>
    ///装备id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ItemId {
      get { return itemId_; }
      set {
        itemId_ = value;
      }
    }

    /// <summary>Field number for the "rewardId" field.</summary>
    public const int RewardIdFieldNumber = 2;
    private int rewardId_;
    /// <summary>
    ///奖励itemId
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RewardId {
      get { return rewardId_; }
      set {
        rewardId_ = value;
      }
    }

    /// <summary>Field number for the "roleName" field.</summary>
    public const int RoleNameFieldNumber = 3;
    private string roleName_ = "";
    /// <summary>
    ///角色名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RoleName {
      get { return roleName_; }
      set {
        roleName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "recycleTime" field.</summary>
    public const int RecycleTimeFieldNumber = 4;
    private long recycleTime_;
    /// <summary>
    ///回收时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long RecycleTime {
      get { return recycleTime_; }
      set {
        recycleTime_ = value;
      }
    }

    /// <summary>Field number for the "rewardCount" field.</summary>
    public const int RewardCountFieldNumber = 5;
    private int rewardCount_;
    /// <summary>
    ///奖励个数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RewardCount {
      get { return rewardCount_; }
      set {
        rewardCount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ItemId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ItemId);
      }
      if (RewardId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(RewardId);
      }
      if (RoleName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(RoleName);
      }
      if (RecycleTime != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(RecycleTime);
      }
      if (RewardCount != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(RewardCount);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ItemId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ItemId);
      }
      if (RewardId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RewardId);
      }
      if (RoleName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RoleName);
      }
      if (RecycleTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(RecycleTime);
      }
      if (RewardCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RewardCount);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ItemId = input.ReadInt32();
            break;
          }
          case 16: {
            RewardId = input.ReadInt32();
            break;
          }
          case 26: {
            RoleName = input.ReadString();
            break;
          }
          case 32: {
            RecycleTime = input.ReadInt64();
            break;
          }
          case 40: {
            RewardCount = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class RankInfo : pb::IMessage {
    private static readonly pb::MessageParser<RankInfo> _parser = new pb::MessageParser<RankInfo>(() => new RankInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RankInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "rank" field.</summary>
    public const int RankFieldNumber = 1;
    private int rank_;
    /// <summary>
    ///排名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Rank {
      get { return rank_; }
      set {
        rank_ = value;
      }
    }

    /// <summary>Field number for the "roleName" field.</summary>
    public const int RoleNameFieldNumber = 2;
    private string roleName_ = "";
    /// <summary>
    ///名字
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RoleName {
      get { return roleName_; }
      set {
        roleName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "rein" field.</summary>
    public const int ReinFieldNumber = 3;
    private int rein_;
    /// <summary>
    ///转生
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Rein {
      get { return rein_; }
      set {
        rein_ = value;
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 4;
    private int level_;
    /// <summary>
    ///等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "param" field.</summary>
    public const int ParamFieldNumber = 5;
    private int param_;
    /// <summary>
    ///参数，积分
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Param {
      get { return param_; }
      set {
        param_ = value;
      }
    }

    /// <summary>Field number for the "award" field.</summary>
    public const int AwardFieldNumber = 6;
    private int award_;
    /// <summary>
    ///奖励
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Award {
      get { return award_; }
      set {
        award_ = value;
      }
    }

    /// <summary>Field number for the "career" field.</summary>
    public const int CareerFieldNumber = 7;
    private int career_;
    /// <summary>
    ///职业
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Career {
      get { return career_; }
      set {
        career_ = value;
      }
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 8;
    private long id_;
    /// <summary>
    ///玩家id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Rank != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Rank);
      }
      if (RoleName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(RoleName);
      }
      if (Rein != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Rein);
      }
      if (Level != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Level);
      }
      if (Param != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Param);
      }
      if (Award != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Award);
      }
      if (Career != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Career);
      }
      if (Id != 0L) {
        output.WriteRawTag(64);
        output.WriteInt64(Id);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Rank != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Rank);
      }
      if (RoleName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RoleName);
      }
      if (Rein != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Rein);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (Param != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Param);
      }
      if (Award != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Award);
      }
      if (Career != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Career);
      }
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Rank = input.ReadInt32();
            break;
          }
          case 18: {
            RoleName = input.ReadString();
            break;
          }
          case 24: {
            Rein = input.ReadInt32();
            break;
          }
          case 32: {
            Level = input.ReadInt32();
            break;
          }
          case 40: {
            Param = input.ReadInt32();
            break;
          }
          case 48: {
            Award = input.ReadInt32();
            break;
          }
          case 56: {
            Career = input.ReadInt32();
            break;
          }
          case 64: {
            Id = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed class RoleSimpleInfo : pb::IMessage {
    private static readonly pb::MessageParser<RoleSimpleInfo> _parser = new pb::MessageParser<RoleSimpleInfo>(() => new RoleSimpleInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoleSimpleInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "sex" field.</summary>
    public const int SexFieldNumber = 1;
    private int sex_;
    /// <summary>
    ///职业
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Sex {
      get { return sex_; }
      set {
        sex_ = value;
      }
    }

    /// <summary>Field number for the "career" field.</summary>
    public const int CareerFieldNumber = 2;
    private int career_;
    /// <summary>
    ///性别
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Career {
      get { return career_; }
      set {
        career_ = value;
      }
    }

    /// <summary>Field number for the "cloth" field.</summary>
    public const int ClothFieldNumber = 3;
    private int cloth_;
    /// <summary>
    ///武器
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Cloth {
      get { return cloth_; }
      set {
        cloth_ = value;
      }
    }

    /// <summary>Field number for the "weapon" field.</summary>
    public const int WeaponFieldNumber = 4;
    private int weapon_;
    /// <summary>
    ///衣服
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Weapon {
      get { return weapon_; }
      set {
        weapon_ = value;
      }
    }

    /// <summary>Field number for the "wing" field.</summary>
    public const int WingFieldNumber = 5;
    private int wing_;
    /// <summary>
    ///翅膀
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Wing {
      get { return wing_; }
      set {
        wing_ = value;
      }
    }

    /// <summary>Field number for the "fashionCloth" field.</summary>
    public const int FashionClothFieldNumber = 6;
    private int fashionCloth_;
    /// <summary>
    ///时装衣服
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FashionCloth {
      get { return fashionCloth_; }
      set {
        fashionCloth_ = value;
      }
    }

    /// <summary>Field number for the "fashionWing" field.</summary>
    public const int FashionWingFieldNumber = 7;
    private int fashionWing_;
    /// <summary>
    ///时装翅膀
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FashionWing {
      get { return fashionWing_; }
      set {
        fashionWing_ = value;
      }
    }

    /// <summary>Field number for the "fashionWeapon" field.</summary>
    public const int FashionWeaponFieldNumber = 8;
    private int fashionWeapon_;
    /// <summary>
    ///时装武器
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FashionWeapon {
      get { return fashionWeapon_; }
      set {
        fashionWeapon_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Sex != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Sex);
      }
      if (Career != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Career);
      }
      if (Cloth != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Cloth);
      }
      if (Weapon != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Weapon);
      }
      if (Wing != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Wing);
      }
      if (FashionCloth != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(FashionCloth);
      }
      if (FashionWing != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(FashionWing);
      }
      if (FashionWeapon != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(FashionWeapon);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Sex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Sex);
      }
      if (Career != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Career);
      }
      if (Cloth != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Cloth);
      }
      if (Weapon != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Weapon);
      }
      if (Wing != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Wing);
      }
      if (FashionCloth != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FashionCloth);
      }
      if (FashionWing != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FashionWing);
      }
      if (FashionWeapon != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FashionWeapon);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Sex = input.ReadInt32();
            break;
          }
          case 16: {
            Career = input.ReadInt32();
            break;
          }
          case 24: {
            Cloth = input.ReadInt32();
            break;
          }
          case 32: {
            Weapon = input.ReadInt32();
            break;
          }
          case 40: {
            Wing = input.ReadInt32();
            break;
          }
          case 48: {
            FashionCloth = input.ReadInt32();
            break;
          }
          case 56: {
            FashionWing = input.ReadInt32();
            break;
          }
          case 64: {
            FashionWeapon = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class ActivityRankInfo : pb::IMessage {
    private static readonly pb::MessageParser<ActivityRankInfo> _parser = new pb::MessageParser<ActivityRankInfo>(() => new ActivityRankInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ActivityRankInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "activityId" field.</summary>
    public const int ActivityIdFieldNumber = 1;
    private int activityId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ActivityId {
      get { return activityId_; }
      set {
        activityId_ = value;
      }
    }

    /// <summary>Field number for the "firstRoleBean" field.</summary>
    public const int FirstRoleBeanFieldNumber = 2;
    private global::ActivityV2.RoleSimpleInfo firstRoleBean_;
    /// <summary>
    ///排名第一玩家的模型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ActivityV2.RoleSimpleInfo FirstRoleBean {
      get { return firstRoleBean_; }
      set {
        firstRoleBean_ = value;
      }
    }

    /// <summary>Field number for the "secondRoleBean" field.</summary>
    public const int SecondRoleBeanFieldNumber = 3;
    private global::ActivityV2.RoleSimpleInfo secondRoleBean_;
    /// <summary>
    ///排名第二玩家的模型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ActivityV2.RoleSimpleInfo SecondRoleBean {
      get { return secondRoleBean_; }
      set {
        secondRoleBean_ = value;
      }
    }

    /// <summary>Field number for the "thirdRoleBean" field.</summary>
    public const int ThirdRoleBeanFieldNumber = 4;
    private global::ActivityV2.RoleSimpleInfo thirdRoleBean_;
    /// <summary>
    ///排名第三玩家的模型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ActivityV2.RoleSimpleInfo ThirdRoleBean {
      get { return thirdRoleBean_; }
      set {
        thirdRoleBean_ = value;
      }
    }

    /// <summary>Field number for the "rankInfoList" field.</summary>
    public const int RankInfoListFieldNumber = 5;
    private static readonly pb::FieldCodec<global::ActivityV2.RoleSimpleInfo> _repeated_rankInfoList_codec
        = pb::FieldCodec.ForMessage(42, global::ActivityV2.RoleSimpleInfo.Parser);
    private readonly pbc::RepeatedField<global::ActivityV2.RoleSimpleInfo> rankInfoList_ = new pbc::RepeatedField<global::ActivityV2.RoleSimpleInfo>();
    /// <summary>
    ///排行榜数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ActivityV2.RoleSimpleInfo> RankInfoList {
      get { return rankInfoList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ActivityId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ActivityId);
      }
      if (firstRoleBean_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(FirstRoleBean);
      }
      if (secondRoleBean_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(SecondRoleBean);
      }
      if (thirdRoleBean_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(ThirdRoleBean);
      }
      rankInfoList_.WriteTo(output, _repeated_rankInfoList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ActivityId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ActivityId);
      }
      if (firstRoleBean_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FirstRoleBean);
      }
      if (secondRoleBean_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SecondRoleBean);
      }
      if (thirdRoleBean_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ThirdRoleBean);
      }
      size += rankInfoList_.CalculateSize(_repeated_rankInfoList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ActivityId = input.ReadInt32();
            break;
          }
          case 18: {
            if (firstRoleBean_ == null) {
              firstRoleBean_ = new global::ActivityV2.RoleSimpleInfo();
            }
            input.ReadMessage(firstRoleBean_);
            break;
          }
          case 26: {
            if (secondRoleBean_ == null) {
              secondRoleBean_ = new global::ActivityV2.RoleSimpleInfo();
            }
            input.ReadMessage(secondRoleBean_);
            break;
          }
          case 34: {
            if (thirdRoleBean_ == null) {
              thirdRoleBean_ = new global::ActivityV2.RoleSimpleInfo();
            }
            input.ReadMessage(thirdRoleBean_);
            break;
          }
          case 42: {
            rankInfoList_.AddEntriesFrom(input, _repeated_rankInfoList_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class FirstKillInfo : pb::IMessage {
    private static readonly pb::MessageParser<FirstKillInfo> _parser = new pb::MessageParser<FirstKillInfo>(() => new FirstKillInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FirstKillInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "instanceId" field.</summary>
    public const int InstanceIdFieldNumber = 1;
    private int instanceId_;
    /// <summary>
    ///对应副本id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int InstanceId {
      get { return instanceId_; }
      set {
        instanceId_ = value;
      }
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 2;
    private int state_;
    /// <summary>
    ///击杀状态0未击杀1击杀
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (InstanceId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(InstanceId);
      }
      if (State != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(State);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (InstanceId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(InstanceId);
      }
      if (State != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(State);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            InstanceId = input.ReadInt32();
            break;
          }
          case 16: {
            State = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class FirstKillRewardInfo : pb::IMessage {
    private static readonly pb::MessageParser<FirstKillRewardInfo> _parser = new pb::MessageParser<FirstKillRewardInfo>(() => new FirstKillRewardInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FirstKillRewardInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "KillInfos" field.</summary>
    public const int KillInfosFieldNumber = 1;
    private static readonly pb::FieldCodec<global::ActivityV2.FirstKillInfo> _repeated_killInfos_codec
        = pb::FieldCodec.ForMessage(10, global::ActivityV2.FirstKillInfo.Parser);
    private readonly pbc::RepeatedField<global::ActivityV2.FirstKillInfo> killInfos_ = new pbc::RepeatedField<global::ActivityV2.FirstKillInfo>();
    /// <summary>
    ///击杀信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ActivityV2.FirstKillInfo> KillInfos {
      get { return killInfos_; }
    }

    /// <summary>Field number for the "reward" field.</summary>
    public const int RewardFieldNumber = 2;
    private int reward_;
    /// <summary>
    ///是否已领奖 0不可领奖1可领奖2已领奖
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Reward {
      get { return reward_; }
      set {
        reward_ = value;
      }
    }

    /// <summary>Field number for the "num" field.</summary>
    public const int NumFieldNumber = 3;
    private int num_;
    /// <summary>
    ///全服剩余份数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Num {
      get { return num_; }
      set {
        num_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      killInfos_.WriteTo(output, _repeated_killInfos_codec);
      if (Reward != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Reward);
      }
      if (Num != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Num);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += killInfos_.CalculateSize(_repeated_killInfos_codec);
      if (Reward != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Reward);
      }
      if (Num != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Num);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            killInfos_.AddEntriesFrom(input, _repeated_killInfos_codec);
            break;
          }
          case 16: {
            Reward = input.ReadInt32();
            break;
          }
          case 24: {
            Num = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class limitTimeTaskInfo : pb::IMessage {
    private static readonly pb::MessageParser<limitTimeTaskInfo> _parser = new pb::MessageParser<limitTimeTaskInfo>(() => new limitTimeTaskInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<limitTimeTaskInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "taskId" field.</summary>
    public const int TaskIdFieldNumber = 1;
    private int taskId_;
    /// <summary>
    ///任务id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TaskId {
      get { return taskId_; }
      set {
        taskId_ = value;
      }
    }

    /// <summary>Field number for the "taskValue" field.</summary>
    public const int TaskValueFieldNumber = 2;
    private int taskValue_;
    /// <summary>
    ///完成进度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TaskValue {
      get { return taskValue_; }
      set {
        taskValue_ = value;
      }
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 3;
    private int state_;
    /// <summary>
    ///状态 1 未完成 2 已完成 3 已领奖
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    /// <summary>Field number for the "endTime" field.</summary>
    public const int EndTimeFieldNumber = 4;
    private int endTime_;
    /// <summary>
    ///结束时间(s)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EndTime {
      get { return endTime_; }
      set {
        endTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TaskId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(TaskId);
      }
      if (TaskValue != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(TaskValue);
      }
      if (State != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(State);
      }
      if (EndTime != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(EndTime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TaskId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TaskId);
      }
      if (TaskValue != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TaskValue);
      }
      if (State != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(State);
      }
      if (EndTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EndTime);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TaskId = input.ReadInt32();
            break;
          }
          case 16: {
            TaskValue = input.ReadInt32();
            break;
          }
          case 24: {
            State = input.ReadInt32();
            break;
          }
          case 32: {
            EndTime = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class DayInfoOfHappySevenDay : pb::IMessage {
    private static readonly pb::MessageParser<DayInfoOfHappySevenDay> _parser = new pb::MessageParser<DayInfoOfHappySevenDay>(() => new DayInfoOfHappySevenDay());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DayInfoOfHappySevenDay> Parser { get { return _parser; } }

    /// <summary>Field number for the "day" field.</summary>
    public const int DayFieldNumber = 1;
    private int day_;
    /// <summary>
    ///天数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Day {
      get { return day_; }
      set {
        day_ = value;
      }
    }

    /// <summary>Field number for the "groupInfo" field.</summary>
    public const int GroupInfoFieldNumber = 2;
    private static readonly pb::FieldCodec<global::ActivityV2.GroupInfoOfDay> _repeated_groupInfo_codec
        = pb::FieldCodec.ForMessage(18, global::ActivityV2.GroupInfoOfDay.Parser);
    private readonly pbc::RepeatedField<global::ActivityV2.GroupInfoOfDay> groupInfo_ = new pbc::RepeatedField<global::ActivityV2.GroupInfoOfDay>();
    /// <summary>
    ///组活动信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ActivityV2.GroupInfoOfDay> GroupInfo {
      get { return groupInfo_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Day != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Day);
      }
      groupInfo_.WriteTo(output, _repeated_groupInfo_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Day != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Day);
      }
      size += groupInfo_.CalculateSize(_repeated_groupInfo_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Day = input.ReadInt32();
            break;
          }
          case 18: {
            groupInfo_.AddEntriesFrom(input, _repeated_groupInfo_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class GroupInfoOfDay : pb::IMessage {
    private static readonly pb::MessageParser<GroupInfoOfDay> _parser = new pb::MessageParser<GroupInfoOfDay>(() => new GroupInfoOfDay());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GroupInfoOfDay> Parser { get { return _parser; } }

    /// <summary>Field number for the "group" field.</summary>
    public const int GroupFieldNumber = 1;
    private int group_;
    /// <summary>
    ///组别
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Group {
      get { return group_; }
      set {
        group_ = value;
      }
    }

    /// <summary>Field number for the "indexInfo" field.</summary>
    public const int IndexInfoFieldNumber = 2;
    private static readonly pb::FieldCodec<global::ActivityV2.IndexInfoOfDay> _repeated_indexInfo_codec
        = pb::FieldCodec.ForMessage(18, global::ActivityV2.IndexInfoOfDay.Parser);
    private readonly pbc::RepeatedField<global::ActivityV2.IndexInfoOfDay> indexInfo_ = new pbc::RepeatedField<global::ActivityV2.IndexInfoOfDay>();
    /// <summary>
    ///序号信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ActivityV2.IndexInfoOfDay> IndexInfo {
      get { return indexInfo_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Group != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Group);
      }
      indexInfo_.WriteTo(output, _repeated_indexInfo_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Group != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Group);
      }
      size += indexInfo_.CalculateSize(_repeated_indexInfo_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Group = input.ReadInt32();
            break;
          }
          case 18: {
            indexInfo_.AddEntriesFrom(input, _repeated_indexInfo_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class IndexInfoOfDay : pb::IMessage {
    private static readonly pb::MessageParser<IndexInfoOfDay> _parser = new pb::MessageParser<IndexInfoOfDay>(() => new IndexInfoOfDay());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IndexInfoOfDay> Parser { get { return _parser; } }

    /// <summary>Field number for the "activityId" field.</summary>
    public const int ActivityIdFieldNumber = 1;
    private int activityId_;
    /// <summary>
    ///活动id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ActivityId {
      get { return activityId_; }
      set {
        activityId_ = value;
      }
    }

    /// <summary>Field number for the "day" field.</summary>
    public const int DayFieldNumber = 2;
    private int day_;
    /// <summary>
    ///天数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Day {
      get { return day_; }
      set {
        day_ = value;
      }
    }

    /// <summary>Field number for the "group" field.</summary>
    public const int GroupFieldNumber = 3;
    private int group_;
    /// <summary>
    ///组别
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Group {
      get { return group_; }
      set {
        group_ = value;
      }
    }

    /// <summary>Field number for the "index" field.</summary>
    public const int IndexFieldNumber = 4;
    private int index_;
    /// <summary>
    ///顺序
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    /// <summary>Field number for the "goal" field.</summary>
    public const int GoalFieldNumber = 5;
    private int goal_;
    /// <summary>
    ///目标
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Goal {
      get { return goal_; }
      set {
        goal_ = value;
      }
    }

    /// <summary>Field number for the "completeCount" field.</summary>
    public const int CompleteCountFieldNumber = 6;
    private int completeCount_;
    /// <summary>
    ///完成数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CompleteCount {
      get { return completeCount_; }
      set {
        completeCount_ = value;
      }
    }

    /// <summary>Field number for the "total" field.</summary>
    public const int TotalFieldNumber = 7;
    private int total_;
    /// <summary>
    ///总进度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Total {
      get { return total_; }
      set {
        total_ = value;
      }
    }

    /// <summary>Field number for the "rewardState" field.</summary>
    public const int RewardStateFieldNumber = 8;
    private int rewardState_;
    /// <summary>
    ///领取状态 0 不可领 1 可领取 2 已领取
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RewardState {
      get { return rewardState_; }
      set {
        rewardState_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ActivityId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ActivityId);
      }
      if (Day != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Day);
      }
      if (Group != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Group);
      }
      if (Index != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Index);
      }
      if (Goal != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Goal);
      }
      if (CompleteCount != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(CompleteCount);
      }
      if (Total != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Total);
      }
      if (RewardState != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(RewardState);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ActivityId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ActivityId);
      }
      if (Day != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Day);
      }
      if (Group != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Group);
      }
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Index);
      }
      if (Goal != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Goal);
      }
      if (CompleteCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CompleteCount);
      }
      if (Total != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Total);
      }
      if (RewardState != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RewardState);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ActivityId = input.ReadInt32();
            break;
          }
          case 16: {
            Day = input.ReadInt32();
            break;
          }
          case 24: {
            Group = input.ReadInt32();
            break;
          }
          case 32: {
            Index = input.ReadInt32();
            break;
          }
          case 40: {
            Goal = input.ReadInt32();
            break;
          }
          case 48: {
            CompleteCount = input.ReadInt32();
            break;
          }
          case 56: {
            Total = input.ReadInt32();
            break;
          }
          case 64: {
            RewardState = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class ActivityTimeInfo : pb::IMessage {
    private static readonly pb::MessageParser<ActivityTimeInfo> _parser = new pb::MessageParser<ActivityTimeInfo>(() => new ActivityTimeInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ActivityTimeInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "activityId" field.</summary>
    public const int ActivityIdFieldNumber = 1;
    private int activityId_;
    /// <summary>
    ///活动id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ActivityId {
      get { return activityId_; }
      set {
        activityId_ = value;
      }
    }

    /// <summary>Field number for the "beginTime" field.</summary>
    public const int BeginTimeFieldNumber = 2;
    private int beginTime_;
    /// <summary>
    ///开始时间(s)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BeginTime {
      get { return beginTime_; }
      set {
        beginTime_ = value;
      }
    }

    /// <summary>Field number for the "endTime" field.</summary>
    public const int EndTimeFieldNumber = 3;
    private int endTime_;
    /// <summary>
    ///结束时间(s)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EndTime {
      get { return endTime_; }
      set {
        endTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ActivityId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ActivityId);
      }
      if (BeginTime != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(BeginTime);
      }
      if (EndTime != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(EndTime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ActivityId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ActivityId);
      }
      if (BeginTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BeginTime);
      }
      if (EndTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EndTime);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ActivityId = input.ReadInt32();
            break;
          }
          case 16: {
            BeginTime = input.ReadInt32();
            break;
          }
          case 24: {
            EndTime = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class RaffleItem : pb::IMessage {
    private static readonly pb::MessageParser<RaffleItem> _parser = new pb::MessageParser<RaffleItem>(() => new RaffleItem());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RaffleItem> Parser { get { return _parser; } }

    /// <summary>Field number for the "itemId" field.</summary>
    public const int ItemIdFieldNumber = 1;
    private int itemId_;
    /// <summary>
    ///道具id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ItemId {
      get { return itemId_; }
      set {
        itemId_ = value;
      }
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 2;
    private int count_;
    /// <summary>
    ///道具数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ItemId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ItemId);
      }
      if (Count != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Count);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ItemId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ItemId);
      }
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Count);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ItemId = input.ReadInt32();
            break;
          }
          case 16: {
            Count = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CrazyHappyInfo : pb::IMessage {
    private static readonly pb::MessageParser<CrazyHappyInfo> _parser = new pb::MessageParser<CrazyHappyInfo>(() => new CrazyHappyInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CrazyHappyInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "group" field.</summary>
    public const int GroupFieldNumber = 1;
    private int group_;
    /// <summary>
    ///组别
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Group {
      get { return group_; }
      set {
        group_ = value;
      }
    }

    /// <summary>Field number for the "index" field.</summary>
    public const int IndexFieldNumber = 2;
    private int index_;
    /// <summary>
    ///编号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 3;
    private int status_;
    /// <summary>
    ///领取状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "curCount" field.</summary>
    public const int CurCountFieldNumber = 4;
    private int curCount_;
    /// <summary>
    ///当前数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurCount {
      get { return curCount_; }
      set {
        curCount_ = value;
      }
    }

    /// <summary>Field number for the "totalCount" field.</summary>
    public const int TotalCountFieldNumber = 5;
    private int totalCount_;
    /// <summary>
    ///总数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TotalCount {
      get { return totalCount_; }
      set {
        totalCount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Group != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Group);
      }
      if (Index != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Index);
      }
      if (Status != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Status);
      }
      if (CurCount != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(CurCount);
      }
      if (TotalCount != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(TotalCount);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Group != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Group);
      }
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Index);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Status);
      }
      if (CurCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurCount);
      }
      if (TotalCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotalCount);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Group = input.ReadInt32();
            break;
          }
          case 16: {
            Index = input.ReadInt32();
            break;
          }
          case 24: {
            Status = input.ReadInt32();
            break;
          }
          case 32: {
            CurCount = input.ReadInt32();
            break;
          }
          case 40: {
            TotalCount = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class ShouHuLimitBuyInfo : pb::IMessage {
    private static readonly pb::MessageParser<ShouHuLimitBuyInfo> _parser = new pb::MessageParser<ShouHuLimitBuyInfo>(() => new ShouHuLimitBuyInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ShouHuLimitBuyInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "activityId" field.</summary>
    public const int ActivityIdFieldNumber = 1;
    private int activityId_;
    /// <summary>
    ///活动id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ActivityId {
      get { return activityId_; }
      set {
        activityId_ = value;
      }
    }

    /// <summary>Field number for the "lifeCount" field.</summary>
    public const int LifeCountFieldNumber = 2;
    private int lifeCount_;
    /// <summary>
    ///已经购买的次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LifeCount {
      get { return lifeCount_; }
      set {
        lifeCount_ = value;
      }
    }

    /// <summary>Field number for the "leftCount" field.</summary>
    public const int LeftCountFieldNumber = 3;
    private int leftCount_;
    /// <summary>
    ///剩余可购买次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LeftCount {
      get { return leftCount_; }
      set {
        leftCount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ActivityId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ActivityId);
      }
      if (LifeCount != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(LifeCount);
      }
      if (LeftCount != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(LeftCount);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ActivityId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ActivityId);
      }
      if (LifeCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LifeCount);
      }
      if (LeftCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LeftCount);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ActivityId = input.ReadInt32();
            break;
          }
          case 16: {
            LifeCount = input.ReadInt32();
            break;
          }
          case 24: {
            LeftCount = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class GrowTrailActivityInfo : pb::IMessage {
    private static readonly pb::MessageParser<GrowTrailActivityInfo> _parser = new pb::MessageParser<GrowTrailActivityInfo>(() => new GrowTrailActivityInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GrowTrailActivityInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "dayNo" field.</summary>
    public const int DayNoFieldNumber = 1;
    private int dayNo_;
    /// <summary>
    ///天数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DayNo {
      get { return dayNo_; }
      set {
        dayNo_ = value;
      }
    }

    /// <summary>Field number for the "group" field.</summary>
    public const int GroupFieldNumber = 2;
    private int group_;
    /// <summary>
    ///组
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Group {
      get { return group_; }
      set {
        group_ = value;
      }
    }

    /// <summary>Field number for the "index" field.</summary>
    public const int IndexFieldNumber = 3;
    private int index_;
    /// <summary>
    ///编号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    /// <summary>Field number for the "curCount" field.</summary>
    public const int CurCountFieldNumber = 4;
    private int curCount_;
    /// <summary>
    ///当前数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurCount {
      get { return curCount_; }
      set {
        curCount_ = value;
      }
    }

    /// <summary>Field number for the "rewardState" field.</summary>
    public const int RewardStateFieldNumber = 5;
    private int rewardState_;
    /// <summary>
    ///奖励状态0 不可领 1 可领取 2已领取
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RewardState {
      get { return rewardState_; }
      set {
        rewardState_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DayNo != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(DayNo);
      }
      if (Group != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Group);
      }
      if (Index != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Index);
      }
      if (CurCount != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(CurCount);
      }
      if (RewardState != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(RewardState);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DayNo != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DayNo);
      }
      if (Group != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Group);
      }
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Index);
      }
      if (CurCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurCount);
      }
      if (RewardState != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RewardState);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            DayNo = input.ReadInt32();
            break;
          }
          case 16: {
            Group = input.ReadInt32();
            break;
          }
          case 24: {
            Index = input.ReadInt32();
            break;
          }
          case 32: {
            CurCount = input.ReadInt32();
            break;
          }
          case 40: {
            RewardState = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class GrowTrailFinalInfo : pb::IMessage {
    private static readonly pb::MessageParser<GrowTrailFinalInfo> _parser = new pb::MessageParser<GrowTrailFinalInfo>(() => new GrowTrailFinalInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GrowTrailFinalInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "index" field.</summary>
    public const int IndexFieldNumber = 1;
    private int index_;
    /// <summary>
    ///编号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    /// <summary>Field number for the "rewardState" field.</summary>
    public const int RewardStateFieldNumber = 2;
    private int rewardState_;
    /// <summary>
    ///奖励状态0 不可领 1 可领取 2已领取
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RewardState {
      get { return rewardState_; }
      set {
        rewardState_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Index != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Index);
      }
      if (RewardState != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(RewardState);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Index);
      }
      if (RewardState != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RewardState);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Index = input.ReadInt32();
            break;
          }
          case 16: {
            RewardState = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求领取活动奖励
  /// </summary>
  public sealed class ReqGetActivityReward : pb::IMessage {
    private static readonly pb::MessageParser<ReqGetActivityReward> _parser = new pb::MessageParser<ReqGetActivityReward>(() => new ReqGetActivityReward());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqGetActivityReward> Parser { get { return _parser; } }

    /// <summary>Field number for the "activityId" field.</summary>
    public const int ActivityIdFieldNumber = 1;
    private int activityId_;
    /// <summary>
    ///活动id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ActivityId {
      get { return activityId_; }
      set {
        activityId_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private int type_;
    /// <summary>
    ///目标类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "goal" field.</summary>
    public const int GoalFieldNumber = 3;
    private int goal_;
    /// <summary>
    ///目标参数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Goal {
      get { return goal_; }
      set {
        goal_ = value;
      }
    }

    /// <summary>Field number for the "multi" field.</summary>
    public const int MultiFieldNumber = 4;
    private int multi_;
    /// <summary>
    ///多倍领取倍数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Multi {
      get { return multi_; }
      set {
        multi_ = value;
      }
    }

    /// <summary>Field number for the "data64" field.</summary>
    public const int Data64FieldNumber = 5;
    private long data64_;
    /// <summary>
    ///客户端传过来的64位，暂时表示回收选择的物品id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Data64 {
      get { return data64_; }
      set {
        data64_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ActivityId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ActivityId);
      }
      if (Type != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Type);
      }
      if (Goal != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Goal);
      }
      if (Multi != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Multi);
      }
      if (Data64 != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(Data64);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ActivityId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ActivityId);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (Goal != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Goal);
      }
      if (Multi != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Multi);
      }
      if (Data64 != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Data64);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ActivityId = input.ReadInt32();
            break;
          }
          case 16: {
            Type = input.ReadInt32();
            break;
          }
          case 24: {
            Goal = input.ReadInt32();
            break;
          }
          case 32: {
            Multi = input.ReadInt32();
            break;
          }
          case 40: {
            Data64 = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///返回领取活动奖励
  /// </summary>
  public sealed class ResGetActivityReward : pb::IMessage {
    private static readonly pb::MessageParser<ResGetActivityReward> _parser = new pb::MessageParser<ResGetActivityReward>(() => new ResGetActivityReward());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ResGetActivityReward> Parser { get { return _parser; } }

    /// <summary>Field number for the "activityId" field.</summary>
    public const int ActivityIdFieldNumber = 1;
    private int activityId_;
    /// <summary>
    ///活动id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ActivityId {
      get { return activityId_; }
      set {
        activityId_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private int type_;
    /// <summary>
    ///目标类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "group" field.</summary>
    public const int GroupFieldNumber = 3;
    private int group_;
    /// <summary>
    ///组id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Group {
      get { return group_; }
      set {
        group_ = value;
      }
    }

    /// <summary>Field number for the "goal" field.</summary>
    public const int GoalFieldNumber = 4;
    private int goal_;
    /// <summary>
    ///目标参数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Goal {
      get { return goal_; }
      set {
        goal_ = value;
      }
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 5;
    private int state_;
    /// <summary>
    ///状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    /// <summary>Field number for the "leftCount" field.</summary>
    public const int LeftCountFieldNumber = 6;
    private int leftCount_;
    /// <summary>
    ///剩余数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LeftCount {
      get { return leftCount_; }
      set {
        leftCount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ActivityId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ActivityId);
      }
      if (Type != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Type);
      }
      if (Group != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Group);
      }
      if (Goal != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Goal);
      }
      if (State != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(State);
      }
      if (LeftCount != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(LeftCount);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ActivityId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ActivityId);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (Group != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Group);
      }
      if (Goal != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Goal);
      }
      if (State != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(State);
      }
      if (LeftCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LeftCount);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ActivityId = input.ReadInt32();
            break;
          }
          case 16: {
            Type = input.ReadInt32();
            break;
          }
          case 24: {
            Group = input.ReadInt32();
            break;
          }
          case 32: {
            Goal = input.ReadInt32();
            break;
          }
          case 40: {
            State = input.ReadInt32();
            break;
          }
          case 48: {
            LeftCount = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求打开活动面板
  /// </summary>
  public sealed class ReqOpenPanel : pb::IMessage {
    private static readonly pb::MessageParser<ReqOpenPanel> _parser = new pb::MessageParser<ReqOpenPanel>(() => new ReqOpenPanel());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqOpenPanel> Parser { get { return _parser; } }

    /// <summary>Field number for the "activityType" field.</summary>
    public const int ActivityTypeFieldNumber = 1;
    private int activityType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ActivityType {
      get { return activityType_; }
      set {
        activityType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ActivityType != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ActivityType);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ActivityType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ActivityType);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ActivityType = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///返回排行榜类型活动数据
  /// </summary>
  public sealed class ResRankActivity : pb::IMessage {
    private static readonly pb::MessageParser<ResRankActivity> _parser = new pb::MessageParser<ResRankActivity>(() => new ResRankActivity());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ResRankActivity> Parser { get { return _parser; } }

    /// <summary>Field number for the "groupId" field.</summary>
    public const int GroupIdFieldNumber = 1;
    private int groupId_;
    /// <summary>
    ///组id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GroupId {
      get { return groupId_; }
      set {
        groupId_ = value;
      }
    }

    /// <summary>Field number for the "rankInfoList" field.</summary>
    public const int RankInfoListFieldNumber = 2;
    private static readonly pb::FieldCodec<global::ActivityV2.ActivityRankInfo> _repeated_rankInfoList_codec
        = pb::FieldCodec.ForMessage(18, global::ActivityV2.ActivityRankInfo.Parser);
    private readonly pbc::RepeatedField<global::ActivityV2.ActivityRankInfo> rankInfoList_ = new pbc::RepeatedField<global::ActivityV2.ActivityRankInfo>();
    /// <summary>
    ///活动数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ActivityV2.ActivityRankInfo> RankInfoList {
      get { return rankInfoList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GroupId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(GroupId);
      }
      rankInfoList_.WriteTo(output, _repeated_rankInfoList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GroupId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GroupId);
      }
      size += rankInfoList_.CalculateSize(_repeated_rankInfoList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            GroupId = input.ReadInt32();
            break;
          }
          case 18: {
            rankInfoList_.AddEntriesFrom(input, _repeated_rankInfoList_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///返回每周充值累计数量
  /// </summary>
  public sealed class ResWeekTotalRechargeNum : pb::IMessage {
    private static readonly pb::MessageParser<ResWeekTotalRechargeNum> _parser = new pb::MessageParser<ResWeekTotalRechargeNum>(() => new ResWeekTotalRechargeNum());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ResWeekTotalRechargeNum> Parser { get { return _parser; } }

    /// <summary>Field number for the "totalNum" field.</summary>
    public const int TotalNumFieldNumber = 1;
    private int totalNum_;
    /// <summary>
    ///累计数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TotalNum {
      get { return totalNum_; }
      set {
        totalNum_ = value;
      }
    }

    /// <summary>Field number for the "activityId" field.</summary>
    public const int ActivityIdFieldNumber = 2;
    private int activityId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ActivityId {
      get { return activityId_; }
      set {
        activityId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TotalNum != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(TotalNum);
      }
      if (ActivityId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ActivityId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TotalNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotalNum);
      }
      if (ActivityId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ActivityId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TotalNum = input.ReadInt32();
            break;
          }
          case 16: {
            ActivityId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///返回限时任务额外奖励
  /// </summary>
  public sealed class ResExtraReward : pb::IMessage {
    private static readonly pb::MessageParser<ResExtraReward> _parser = new pb::MessageParser<ResExtraReward>(() => new ResExtraReward());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ResExtraReward> Parser { get { return _parser; } }

    /// <summary>Field number for the "activityId" field.</summary>
    public const int ActivityIdFieldNumber = 1;
    private int activityId_;
    /// <summary>
    ///活动id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ActivityId {
      get { return activityId_; }
      set {
        activityId_ = value;
      }
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 2;
    private int time_;
    /// <summary>
    ///剩余时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    /// <summary>Field number for the "goalType" field.</summary>
    public const int GoalTypeFieldNumber = 3;
    private int goalType_;
    /// <summary>
    ///当前第几轮
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GoalType {
      get { return goalType_; }
      set {
        goalType_ = value;
      }
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 4;
    private int state_;
    /// <summary>
    ///奖励领取状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ActivityId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ActivityId);
      }
      if (Time != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Time);
      }
      if (GoalType != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(GoalType);
      }
      if (State != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(State);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ActivityId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ActivityId);
      }
      if (Time != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Time);
      }
      if (GoalType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GoalType);
      }
      if (State != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(State);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ActivityId = input.ReadInt32();
            break;
          }
          case 16: {
            Time = input.ReadInt32();
            break;
          }
          case 24: {
            GoalType = input.ReadInt32();
            break;
          }
          case 32: {
            State = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求领取限时任务额外奖励
  /// </summary>
  public sealed class ReqGetExtraReward : pb::IMessage {
    private static readonly pb::MessageParser<ReqGetExtraReward> _parser = new pb::MessageParser<ReqGetExtraReward>(() => new ReqGetExtraReward());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqGetExtraReward> Parser { get { return _parser; } }

    /// <summary>Field number for the "activityId" field.</summary>
    public const int ActivityIdFieldNumber = 1;
    private int activityId_;
    /// <summary>
    ///活动id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ActivityId {
      get { return activityId_; }
      set {
        activityId_ = value;
      }
    }

    /// <summary>Field number for the "goalType" field.</summary>
    public const int GoalTypeFieldNumber = 2;
    private int goalType_;
    /// <summary>
    ///当前第几轮
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GoalType {
      get { return goalType_; }
      set {
        goalType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ActivityId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ActivityId);
      }
      if (GoalType != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(GoalType);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ActivityId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ActivityId);
      }
      if (GoalType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GoalType);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ActivityId = input.ReadInt32();
            break;
          }
          case 16: {
            GoalType = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求打开炼制面板
  /// </summary>
  public sealed class ReqOpenLianZhi : pb::IMessage {
    private static readonly pb::MessageParser<ReqOpenLianZhi> _parser = new pb::MessageParser<ReqOpenLianZhi>(() => new ReqOpenLianZhi());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqOpenLianZhi> Parser { get { return _parser; } }

    /// <summary>Field number for the "activityId" field.</summary>
    public const int ActivityIdFieldNumber = 1;
    private int activityId_;
    /// <summary>
    ///活动id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ActivityId {
      get { return activityId_; }
      set {
        activityId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ActivityId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ActivityId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ActivityId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ActivityId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ActivityId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///返回经验炼制面板
  /// </summary>
  public sealed class ResOpenLianZhi : pb::IMessage {
    private static readonly pb::MessageParser<ResOpenLianZhi> _parser = new pb::MessageParser<ResOpenLianZhi>(() => new ResOpenLianZhi());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ResOpenLianZhi> Parser { get { return _parser; } }

    /// <summary>Field number for the "activityId" field.</summary>
    public const int ActivityIdFieldNumber = 1;
    private int activityId_;
    /// <summary>
    ///活动id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ActivityId {
      get { return activityId_; }
      set {
        activityId_ = value;
      }
    }

    /// <summary>Field number for the "times" field.</summary>
    public const int TimesFieldNumber = 2;
    private int times_;
    /// <summary>
    ///档次
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Times {
      get { return times_; }
      set {
        times_ = value;
      }
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 3;
    private int state_;
    /// <summary>
    ///1表示炼制获得 0表示其他
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    /// <summary>Field number for the "completedList" field.</summary>
    public const int CompletedListFieldNumber = 4;
    private static readonly pb::FieldCodec<int> _repeated_completedList_codec
        = pb::FieldCodec.ForInt32(34);
    private readonly pbc::RepeatedField<int> completedList_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///已完成的档次
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> CompletedList {
      get { return completedList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ActivityId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ActivityId);
      }
      if (Times != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Times);
      }
      if (State != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(State);
      }
      completedList_.WriteTo(output, _repeated_completedList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ActivityId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ActivityId);
      }
      if (Times != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Times);
      }
      if (State != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(State);
      }
      size += completedList_.CalculateSize(_repeated_completedList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ActivityId = input.ReadInt32();
            break;
          }
          case 16: {
            Times = input.ReadInt32();
            break;
          }
          case 24: {
            State = input.ReadInt32();
            break;
          }
          case 34:
          case 32: {
            completedList_.AddEntriesFrom(input, _repeated_completedList_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求炼制
  /// </summary>
  public sealed class ReqLianZhi : pb::IMessage {
    private static readonly pb::MessageParser<ReqLianZhi> _parser = new pb::MessageParser<ReqLianZhi>(() => new ReqLianZhi());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqLianZhi> Parser { get { return _parser; } }

    /// <summary>Field number for the "activityId" field.</summary>
    public const int ActivityIdFieldNumber = 1;
    private int activityId_;
    /// <summary>
    ///活动id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ActivityId {
      get { return activityId_; }
      set {
        activityId_ = value;
      }
    }

    /// <summary>Field number for the "times" field.</summary>
    public const int TimesFieldNumber = 2;
    private int times_;
    /// <summary>
    ///档次
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Times {
      get { return times_; }
      set {
        times_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ActivityId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ActivityId);
      }
      if (Times != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Times);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ActivityId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ActivityId);
      }
      if (Times != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Times);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ActivityId = input.ReadInt32();
            break;
          }
          case 16: {
            Times = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///发送带目标的活动数据改变
  /// </summary>
  public sealed class ResActivityDataChange : pb::IMessage {
    private static readonly pb::MessageParser<ResActivityDataChange> _parser = new pb::MessageParser<ResActivityDataChange>(() => new ResActivityDataChange());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ResActivityDataChange> Parser { get { return _parser; } }

    /// <summary>Field number for the "activityId" field.</summary>
    public const int ActivityIdFieldNumber = 1;
    private int activityId_;
    /// <summary>
    ///活动id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ActivityId {
      get { return activityId_; }
      set {
        activityId_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private int type_;
    /// <summary>
    ///目标类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "group" field.</summary>
    public const int GroupFieldNumber = 3;
    private int group_;
    /// <summary>
    ///组id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Group {
      get { return group_; }
      set {
        group_ = value;
      }
    }

    /// <summary>Field number for the "goal" field.</summary>
    public const int GoalFieldNumber = 4;
    private int goal_;
    /// <summary>
    ///目标参数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Goal {
      get { return goal_; }
      set {
        goal_ = value;
      }
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 5;
    private int state_;
    /// <summary>
    ///状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    /// <summary>Field number for the "now" field.</summary>
    public const int NowFieldNumber = 6;
    private int now_;
    /// <summary>
    ///当前进度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Now {
      get { return now_; }
      set {
        now_ = value;
      }
    }

    /// <summary>Field number for the "total" field.</summary>
    public const int TotalFieldNumber = 7;
    private int total_;
    /// <summary>
    ///总进度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Total {
      get { return total_; }
      set {
        total_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ActivityId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ActivityId);
      }
      if (Type != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Type);
      }
      if (Group != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Group);
      }
      if (Goal != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Goal);
      }
      if (State != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(State);
      }
      if (Now != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Now);
      }
      if (Total != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Total);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ActivityId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ActivityId);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (Group != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Group);
      }
      if (Goal != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Goal);
      }
      if (State != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(State);
      }
      if (Now != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Now);
      }
      if (Total != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Total);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ActivityId = input.ReadInt32();
            break;
          }
          case 16: {
            Type = input.ReadInt32();
            break;
          }
          case 24: {
            Group = input.ReadInt32();
            break;
          }
          case 32: {
            Goal = input.ReadInt32();
            break;
          }
          case 40: {
            State = input.ReadInt32();
            break;
          }
          case 48: {
            Now = input.ReadInt32();
            break;
          }
          case 56: {
            Total = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///发送累计充值天数
  /// </summary>
  public sealed class ResLeijiRechargeDays : pb::IMessage {
    private static readonly pb::MessageParser<ResLeijiRechargeDays> _parser = new pb::MessageParser<ResLeijiRechargeDays>(() => new ResLeijiRechargeDays());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ResLeijiRechargeDays> Parser { get { return _parser; } }

    /// <summary>Field number for the "days" field.</summary>
    public const int DaysFieldNumber = 1;
    private int days_;
    /// <summary>
    ///累计充值天数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Days {
      get { return days_; }
      set {
        days_ = value;
      }
    }

    /// <summary>Field number for the "activityId" field.</summary>
    public const int ActivityIdFieldNumber = 2;
    private int activityId_;
    /// <summary>
    ///活动Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ActivityId {
      get { return activityId_; }
      set {
        activityId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Days != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Days);
      }
      if (ActivityId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ActivityId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Days != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Days);
      }
      if (ActivityId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ActivityId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Days = input.ReadInt32();
            break;
          }
          case 16: {
            ActivityId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///发送活动boss信息
  /// </summary>
  public sealed class ResSendActivityBossInfo : pb::IMessage {
    private static readonly pb::MessageParser<ResSendActivityBossInfo> _parser = new pb::MessageParser<ResSendActivityBossInfo>(() => new ResSendActivityBossInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ResSendActivityBossInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "remainNum" field.</summary>
    public const int RemainNumFieldNumber = 1;
    private int remainNum_;
    /// <summary>
    ///剩余次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RemainNum {
      get { return remainNum_; }
      set {
        remainNum_ = value;
      }
    }

    /// <summary>Field number for the "hasBuyNum" field.</summary>
    public const int HasBuyNumFieldNumber = 2;
    private int hasBuyNum_;
    /// <summary>
    ///已购买次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HasBuyNum {
      get { return hasBuyNum_; }
      set {
        hasBuyNum_ = value;
      }
    }

    /// <summary>Field number for the "activityId" field.</summary>
    public const int ActivityIdFieldNumber = 3;
    private int activityId_;
    /// <summary>
    ///活动Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ActivityId {
      get { return activityId_; }
      set {
        activityId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RemainNum != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RemainNum);
      }
      if (HasBuyNum != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(HasBuyNum);
      }
      if (ActivityId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ActivityId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RemainNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RemainNum);
      }
      if (HasBuyNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HasBuyNum);
      }
      if (ActivityId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ActivityId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RemainNum = input.ReadInt32();
            break;
          }
          case 16: {
            HasBuyNum = input.ReadInt32();
            break;
          }
          case 24: {
            ActivityId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///发送活动配置改变
  /// </summary>
  public sealed class ResActivityConfigChange : pb::IMessage {
    private static readonly pb::MessageParser<ResActivityConfigChange> _parser = new pb::MessageParser<ResActivityConfigChange>(() => new ResActivityConfigChange());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ResActivityConfigChange> Parser { get { return _parser; } }

    /// <summary>Field number for the "changedActivityList" field.</summary>
    public const int ChangedActivityListFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_changedActivityList_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> changedActivityList_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> ChangedActivityList {
      get { return changedActivityList_; }
    }

    /// <summary>Field number for the "changedGoalList" field.</summary>
    public const int ChangedGoalListFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_changedGoalList_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> changedGoalList_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> ChangedGoalList {
      get { return changedGoalList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      changedActivityList_.WriteTo(output, _repeated_changedActivityList_codec);
      changedGoalList_.WriteTo(output, _repeated_changedGoalList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += changedActivityList_.CalculateSize(_repeated_changedActivityList_codec);
      size += changedGoalList_.CalculateSize(_repeated_changedGoalList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            changedActivityList_.AddEntriesFrom(input, _repeated_changedActivityList_codec);
            break;
          }
          case 18: {
            changedGoalList_.AddEntriesFrom(input, _repeated_changedGoalList_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///发送财富幸运儿信息
  /// </summary>
  public sealed class ResLuckTreasure : pb::IMessage {
    private static readonly pb::MessageParser<ResLuckTreasure> _parser = new pb::MessageParser<ResLuckTreasure>(() => new ResLuckTreasure());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ResLuckTreasure> Parser { get { return _parser; } }

    /// <summary>Field number for the "activityId" field.</summary>
    public const int ActivityIdFieldNumber = 1;
    private int activityId_;
    /// <summary>
    ///活动id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ActivityId {
      get { return activityId_; }
      set {
        activityId_ = value;
      }
    }

    /// <summary>Field number for the "day" field.</summary>
    public const int DayFieldNumber = 2;
    private int day_;
    /// <summary>
    ///第几天
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Day {
      get { return day_; }
      set {
        day_ = value;
      }
    }

    /// <summary>Field number for the "openState" field.</summary>
    public const int OpenStateFieldNumber = 3;
    private int openState_;
    /// <summary>
    ///开奖状态 0开奖前 1开奖后
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OpenState {
      get { return openState_; }
      set {
        openState_ = value;
      }
    }

    /// <summary>Field number for the "luckyName" field.</summary>
    public const int LuckyNameFieldNumber = 4;
    private string luckyName_ = "";
    /// <summary>
    ///获奖者
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LuckyName {
      get { return luckyName_; }
      set {
        luckyName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "luckyNum" field.</summary>
    public const int LuckyNumFieldNumber = 5;
    private int luckyNum_;
    /// <summary>
    ///幸运号码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LuckyNum {
      get { return luckyNum_; }
      set {
        luckyNum_ = value;
      }
    }

    /// <summary>Field number for the "luckNumberList" field.</summary>
    public const int LuckNumberListFieldNumber = 6;
    private static readonly pb::FieldCodec<int> _repeated_luckNumberList_codec
        = pb::FieldCodec.ForInt32(50);
    private readonly pbc::RepeatedField<int> luckNumberList_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///幸运数字
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> LuckNumberList {
      get { return luckNumberList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ActivityId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ActivityId);
      }
      if (Day != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Day);
      }
      if (OpenState != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(OpenState);
      }
      if (LuckyName.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(LuckyName);
      }
      if (LuckyNum != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(LuckyNum);
      }
      luckNumberList_.WriteTo(output, _repeated_luckNumberList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ActivityId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ActivityId);
      }
      if (Day != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Day);
      }
      if (OpenState != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OpenState);
      }
      if (LuckyName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LuckyName);
      }
      if (LuckyNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LuckyNum);
      }
      size += luckNumberList_.CalculateSize(_repeated_luckNumberList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ActivityId = input.ReadInt32();
            break;
          }
          case 16: {
            Day = input.ReadInt32();
            break;
          }
          case 24: {
            OpenState = input.ReadInt32();
            break;
          }
          case 34: {
            LuckyName = input.ReadString();
            break;
          }
          case 40: {
            LuckyNum = input.ReadInt32();
            break;
          }
          case 50:
          case 48: {
            luckNumberList_.AddEntriesFrom(input, _repeated_luckNumberList_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///发送寻宝送礼信息
  /// </summary>
  public sealed class ResHuntGiftNum : pb::IMessage {
    private static readonly pb::MessageParser<ResHuntGiftNum> _parser = new pb::MessageParser<ResHuntGiftNum>(() => new ResHuntGiftNum());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ResHuntGiftNum> Parser { get { return _parser; } }

    /// <summary>Field number for the "activityId" field.</summary>
    public const int ActivityIdFieldNumber = 1;
    private int activityId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ActivityId {
      get { return activityId_; }
      set {
        activityId_ = value;
      }
    }

    /// <summary>Field number for the "num" field.</summary>
    public const int NumFieldNumber = 2;
    private int num_;
    /// <summary>
    ///活动期间寻宝次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Num {
      get { return num_; }
      set {
        num_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ActivityId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ActivityId);
      }
      if (Num != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Num);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ActivityId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ActivityId);
      }
      if (Num != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Num);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ActivityId = input.ReadInt32();
            break;
          }
          case 16: {
            Num = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///发送消费信息
  /// </summary>
  public sealed class ResSpendInfo : pb::IMessage {
    private static readonly pb::MessageParser<ResSpendInfo> _parser = new pb::MessageParser<ResSpendInfo>(() => new ResSpendInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ResSpendInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "activityId" field.</summary>
    public const int ActivityIdFieldNumber = 1;
    private int activityId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ActivityId {
      get { return activityId_; }
      set {
        activityId_ = value;
      }
    }

    /// <summary>Field number for the "num" field.</summary>
    public const int NumFieldNumber = 2;
    private int num_;
    /// <summary>
    ///活动期间寻宝次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Num {
      get { return num_; }
      set {
        num_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ActivityId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ActivityId);
      }
      if (Num != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Num);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ActivityId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ActivityId);
      }
      if (Num != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Num);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ActivityId = input.ReadInt32();
            break;
          }
          case 16: {
            Num = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///发送累计登录信息
  /// </summary>
  public sealed class ResSendTotalLoginDay : pb::IMessage {
    private static readonly pb::MessageParser<ResSendTotalLoginDay> _parser = new pb::MessageParser<ResSendTotalLoginDay>(() => new ResSendTotalLoginDay());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ResSendTotalLoginDay> Parser { get { return _parser; } }

    /// <summary>Field number for the "activityId" field.</summary>
    public const int ActivityIdFieldNumber = 1;
    private int activityId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ActivityId {
      get { return activityId_; }
      set {
        activityId_ = value;
      }
    }

    /// <summary>Field number for the "num" field.</summary>
    public const int NumFieldNumber = 2;
    private int num_;
    /// <summary>
    ///累计登录天数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Num {
      get { return num_; }
      set {
        num_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ActivityId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ActivityId);
      }
      if (Num != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Num);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ActivityId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ActivityId);
      }
      if (Num != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Num);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ActivityId = input.ReadInt32();
            break;
          }
          case 16: {
            Num = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///发送全民boss积分
  /// </summary>
  public sealed class ResSendBossScore : pb::IMessage {
    private static readonly pb::MessageParser<ResSendBossScore> _parser = new pb::MessageParser<ResSendBossScore>(() => new ResSendBossScore());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ResSendBossScore> Parser { get { return _parser; } }

    /// <summary>Field number for the "activityId" field.</summary>
    public const int ActivityIdFieldNumber = 1;
    private int activityId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ActivityId {
      get { return activityId_; }
      set {
        activityId_ = value;
      }
    }

    /// <summary>Field number for the "num" field.</summary>
    public const int NumFieldNumber = 2;
    private int num_;
    /// <summary>
    ///积分数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Num {
      get { return num_; }
      set {
        num_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ActivityId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ActivityId);
      }
      if (Num != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Num);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ActivityId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ActivityId);
      }
      if (Num != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Num);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ActivityId = input.ReadInt32();
            break;
          }
          case 16: {
            Num = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///发送首杀boss信息
  /// </summary>
  public sealed class ResSendFirstKillBoss : pb::IMessage {
    private static readonly pb::MessageParser<ResSendFirstKillBoss> _parser = new pb::MessageParser<ResSendFirstKillBoss>(() => new ResSendFirstKillBoss());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ResSendFirstKillBoss> Parser { get { return _parser; } }

    /// <summary>Field number for the "rewardInfos" field.</summary>
    public const int RewardInfosFieldNumber = 1;
    private static readonly pb::FieldCodec<global::ActivityV2.FirstKillRewardInfo> _repeated_rewardInfos_codec
        = pb::FieldCodec.ForMessage(10, global::ActivityV2.FirstKillRewardInfo.Parser);
    private readonly pbc::RepeatedField<global::ActivityV2.FirstKillRewardInfo> rewardInfos_ = new pbc::RepeatedField<global::ActivityV2.FirstKillRewardInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ActivityV2.FirstKillRewardInfo> RewardInfos {
      get { return rewardInfos_; }
    }

    /// <summary>Field number for the "activityId" field.</summary>
    public const int ActivityIdFieldNumber = 2;
    private int activityId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ActivityId {
      get { return activityId_; }
      set {
        activityId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      rewardInfos_.WriteTo(output, _repeated_rewardInfos_codec);
      if (ActivityId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ActivityId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += rewardInfos_.CalculateSize(_repeated_rewardInfos_codec);
      if (ActivityId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ActivityId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            rewardInfos_.AddEntriesFrom(input, _repeated_rewardInfos_codec);
            break;
          }
          case 16: {
            ActivityId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求领取首杀boss奖励
  /// </summary>
  public sealed class ReqGetFirstKillBossReward : pb::IMessage {
    private static readonly pb::MessageParser<ReqGetFirstKillBossReward> _parser = new pb::MessageParser<ReqGetFirstKillBossReward>(() => new ReqGetFirstKillBossReward());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqGetFirstKillBossReward> Parser { get { return _parser; } }

    /// <summary>Field number for the "activityId" field.</summary>
    public const int ActivityIdFieldNumber = 1;
    private int activityId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ActivityId {
      get { return activityId_; }
      set {
        activityId_ = value;
      }
    }

    /// <summary>Field number for the "cfgId" field.</summary>
    public const int CfgIdFieldNumber = 2;
    private int cfgId_;
    /// <summary>
    ///首杀表配置id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CfgId {
      get { return cfgId_; }
      set {
        cfgId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ActivityId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ActivityId);
      }
      if (CfgId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(CfgId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ActivityId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ActivityId);
      }
      if (CfgId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CfgId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ActivityId = input.ReadInt32();
            break;
          }
          case 16: {
            CfgId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///发送限时任务信息
  /// </summary>
  public sealed class ResTimeLimitTaskAll : pb::IMessage {
    private static readonly pb::MessageParser<ResTimeLimitTaskAll> _parser = new pb::MessageParser<ResTimeLimitTaskAll>(() => new ResTimeLimitTaskAll());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ResTimeLimitTaskAll> Parser { get { return _parser; } }

    /// <summary>Field number for the "taskList" field.</summary>
    public const int TaskListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::ActivityV2.limitTimeTaskInfo> _repeated_taskList_codec
        = pb::FieldCodec.ForMessage(10, global::ActivityV2.limitTimeTaskInfo.Parser);
    private readonly pbc::RepeatedField<global::ActivityV2.limitTimeTaskInfo> taskList_ = new pbc::RepeatedField<global::ActivityV2.limitTimeTaskInfo>();
    /// <summary>
    ///任务列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ActivityV2.limitTimeTaskInfo> TaskList {
      get { return taskList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      taskList_.WriteTo(output, _repeated_taskList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += taskList_.CalculateSize(_repeated_taskList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            taskList_.AddEntriesFrom(input, _repeated_taskList_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///更新限时任务进度
  /// </summary>
  public sealed class ResUpdateTimeLimitTaskProgress : pb::IMessage {
    private static readonly pb::MessageParser<ResUpdateTimeLimitTaskProgress> _parser = new pb::MessageParser<ResUpdateTimeLimitTaskProgress>(() => new ResUpdateTimeLimitTaskProgress());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ResUpdateTimeLimitTaskProgress> Parser { get { return _parser; } }

    /// <summary>Field number for the "taskId" field.</summary>
    public const int TaskIdFieldNumber = 1;
    private int taskId_;
    /// <summary>
    ///任务id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TaskId {
      get { return taskId_; }
      set {
        taskId_ = value;
      }
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 2;
    private int count_;
    /// <summary>
    ///完成次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TaskId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(TaskId);
      }
      if (Count != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Count);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TaskId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TaskId);
      }
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Count);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TaskId = input.ReadInt32();
            break;
          }
          case 16: {
            Count = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///领取限时任务完成奖励
  /// </summary>
  public sealed class ReqDrawTimeLimitTaskReward : pb::IMessage {
    private static readonly pb::MessageParser<ReqDrawTimeLimitTaskReward> _parser = new pb::MessageParser<ReqDrawTimeLimitTaskReward>(() => new ReqDrawTimeLimitTaskReward());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqDrawTimeLimitTaskReward> Parser { get { return _parser; } }

    /// <summary>Field number for the "rate" field.</summary>
    public const int RateFieldNumber = 1;
    private int rate_;
    /// <summary>
    ///倍数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Rate {
      get { return rate_; }
      set {
        rate_ = value;
      }
    }

    /// <summary>Field number for the "taskId" field.</summary>
    public const int TaskIdFieldNumber = 2;
    private int taskId_;
    /// <summary>
    ///任务id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TaskId {
      get { return taskId_; }
      set {
        taskId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Rate != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Rate);
      }
      if (TaskId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(TaskId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Rate != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Rate);
      }
      if (TaskId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TaskId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Rate = input.ReadInt32();
            break;
          }
          case 16: {
            TaskId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///返回领取限时任务奖励
  /// </summary>
  public sealed class ResDrawTimeLimitTaskReward : pb::IMessage {
    private static readonly pb::MessageParser<ResDrawTimeLimitTaskReward> _parser = new pb::MessageParser<ResDrawTimeLimitTaskReward>(() => new ResDrawTimeLimitTaskReward());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ResDrawTimeLimitTaskReward> Parser { get { return _parser; } }

    /// <summary>Field number for the "taskId" field.</summary>
    public const int TaskIdFieldNumber = 1;
    private int taskId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TaskId {
      get { return taskId_; }
      set {
        taskId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TaskId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(TaskId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TaskId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TaskId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TaskId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求玩家排行数据
  /// </summary>
  public sealed class ReqRoleActivityRankInfo : pb::IMessage {
    private static readonly pb::MessageParser<ReqRoleActivityRankInfo> _parser = new pb::MessageParser<ReqRoleActivityRankInfo>(() => new ReqRoleActivityRankInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqRoleActivityRankInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "activityId" field.</summary>
    public const int ActivityIdFieldNumber = 1;
    private int activityId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ActivityId {
      get { return activityId_; }
      set {
        activityId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ActivityId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ActivityId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ActivityId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ActivityId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ActivityId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///返回玩家排行数据
  /// </summary>
  public sealed class ResRoleActivityRankInfo : pb::IMessage {
    private static readonly pb::MessageParser<ResRoleActivityRankInfo> _parser = new pb::MessageParser<ResRoleActivityRankInfo>(() => new ResRoleActivityRankInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ResRoleActivityRankInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "activityId" field.</summary>
    public const int ActivityIdFieldNumber = 1;
    private int activityId_;
    /// <summary>
    ///活动id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ActivityId {
      get { return activityId_; }
      set {
        activityId_ = value;
      }
    }

    /// <summary>Field number for the "rankParam" field.</summary>
    public const int RankParamFieldNumber = 2;
    private int rankParam_;
    /// <summary>
    ///排行参数值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RankParam {
      get { return rankParam_; }
      set {
        rankParam_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ActivityId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ActivityId);
      }
      if (RankParam != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(RankParam);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ActivityId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ActivityId);
      }
      if (RankParam != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RankParam);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ActivityId = input.ReadInt32();
            break;
          }
          case 16: {
            RankParam = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///发送幸运转盘活动信息
  /// </summary>
  public sealed class ResSendLuckyWheelInfo : pb::IMessage {
    private static readonly pb::MessageParser<ResSendLuckyWheelInfo> _parser = new pb::MessageParser<ResSendLuckyWheelInfo>(() => new ResSendLuckyWheelInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ResSendLuckyWheelInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "activityId" field.</summary>
    public const int ActivityIdFieldNumber = 1;
    private int activityId_;
    /// <summary>
    ///活动id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ActivityId {
      get { return activityId_; }
      set {
        activityId_ = value;
      }
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 2;
    private int count_;
    /// <summary>
    ///已充值元宝
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    /// <summary>Field number for the "wheelNum" field.</summary>
    public const int WheelNumFieldNumber = 3;
    private int wheelNum_;
    /// <summary>
    ///剩余转盘次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WheelNum {
      get { return wheelNum_; }
      set {
        wheelNum_ = value;
      }
    }

    /// <summary>Field number for the "totalNum" field.</summary>
    public const int TotalNumFieldNumber = 4;
    private int totalNum_;
    /// <summary>
    ///总转盘次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TotalNum {
      get { return totalNum_; }
      set {
        totalNum_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ActivityId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ActivityId);
      }
      if (Count != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Count);
      }
      if (WheelNum != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(WheelNum);
      }
      if (TotalNum != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(TotalNum);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ActivityId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ActivityId);
      }
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Count);
      }
      if (WheelNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WheelNum);
      }
      if (TotalNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotalNum);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ActivityId = input.ReadInt32();
            break;
          }
          case 16: {
            Count = input.ReadInt32();
            break;
          }
          case 24: {
            WheelNum = input.ReadInt32();
            break;
          }
          case 32: {
            TotalNum = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///开始幸运转盘
  /// </summary>
  public sealed class ReqStartLuckyWheel : pb::IMessage {
    private static readonly pb::MessageParser<ReqStartLuckyWheel> _parser = new pb::MessageParser<ReqStartLuckyWheel>(() => new ReqStartLuckyWheel());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqStartLuckyWheel> Parser { get { return _parser; } }

    /// <summary>Field number for the "activityId" field.</summary>
    public const int ActivityIdFieldNumber = 1;
    private int activityId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ActivityId {
      get { return activityId_; }
      set {
        activityId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ActivityId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ActivityId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ActivityId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ActivityId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ActivityId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///发送幸运转盘结果信息
  /// </summary>
  public sealed class ResSendLuckyWheelResult : pb::IMessage {
    private static readonly pb::MessageParser<ResSendLuckyWheelResult> _parser = new pb::MessageParser<ResSendLuckyWheelResult>(() => new ResSendLuckyWheelResult());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ResSendLuckyWheelResult> Parser { get { return _parser; } }

    /// <summary>Field number for the "activityId" field.</summary>
    public const int ActivityIdFieldNumber = 1;
    private int activityId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ActivityId {
      get { return activityId_; }
      set {
        activityId_ = value;
      }
    }

    /// <summary>Field number for the "index" field.</summary>
    public const int IndexFieldNumber = 2;
    private int index_;
    /// <summary>
    ///奖励位置
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ActivityId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ActivityId);
      }
      if (Index != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Index);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ActivityId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ActivityId);
      }
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Index);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ActivityId = input.ReadInt32();
            break;
          }
          case 16: {
            Index = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///发送幸运转盘奖励
  /// </summary>
  public sealed class ReqGetLuckyWheelReward : pb::IMessage {
    private static readonly pb::MessageParser<ReqGetLuckyWheelReward> _parser = new pb::MessageParser<ReqGetLuckyWheelReward>(() => new ReqGetLuckyWheelReward());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqGetLuckyWheelReward> Parser { get { return _parser; } }

    /// <summary>Field number for the "activityId" field.</summary>
    public const int ActivityIdFieldNumber = 1;
    private int activityId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ActivityId {
      get { return activityId_; }
      set {
        activityId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ActivityId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ActivityId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ActivityId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ActivityId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ActivityId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///发送七日狂欢信息
  /// </summary>
  public sealed class ResHappySevenDayActivityInfo : pb::IMessage {
    private static readonly pb::MessageParser<ResHappySevenDayActivityInfo> _parser = new pb::MessageParser<ResHappySevenDayActivityInfo>(() => new ResHappySevenDayActivityInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ResHappySevenDayActivityInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "activityId" field.</summary>
    public const int ActivityIdFieldNumber = 1;
    private int activityId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ActivityId {
      get { return activityId_; }
      set {
        activityId_ = value;
      }
    }

    /// <summary>Field number for the "dayInfoList" field.</summary>
    public const int DayInfoListFieldNumber = 2;
    private static readonly pb::FieldCodec<global::ActivityV2.DayInfoOfHappySevenDay> _repeated_dayInfoList_codec
        = pb::FieldCodec.ForMessage(18, global::ActivityV2.DayInfoOfHappySevenDay.Parser);
    private readonly pbc::RepeatedField<global::ActivityV2.DayInfoOfHappySevenDay> dayInfoList_ = new pbc::RepeatedField<global::ActivityV2.DayInfoOfHappySevenDay>();
    /// <summary>
    ///日活动数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ActivityV2.DayInfoOfHappySevenDay> DayInfoList {
      get { return dayInfoList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ActivityId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ActivityId);
      }
      dayInfoList_.WriteTo(output, _repeated_dayInfoList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ActivityId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ActivityId);
      }
      size += dayInfoList_.CalculateSize(_repeated_dayInfoList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ActivityId = input.ReadInt32();
            break;
          }
          case 18: {
            dayInfoList_.AddEntriesFrom(input, _repeated_dayInfoList_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求领取七日狂欢奖励
  /// </summary>
  public sealed class ReqDrawHappySevenDayActivityReward : pb::IMessage {
    private static readonly pb::MessageParser<ReqDrawHappySevenDayActivityReward> _parser = new pb::MessageParser<ReqDrawHappySevenDayActivityReward>(() => new ReqDrawHappySevenDayActivityReward());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqDrawHappySevenDayActivityReward> Parser { get { return _parser; } }

    /// <summary>Field number for the "activityId" field.</summary>
    public const int ActivityIdFieldNumber = 1;
    private int activityId_;
    /// <summary>
    ///活动id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ActivityId {
      get { return activityId_; }
      set {
        activityId_ = value;
      }
    }

    /// <summary>Field number for the "day" field.</summary>
    public const int DayFieldNumber = 2;
    private int day_;
    /// <summary>
    ///天数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Day {
      get { return day_; }
      set {
        day_ = value;
      }
    }

    /// <summary>Field number for the "group" field.</summary>
    public const int GroupFieldNumber = 3;
    private int group_;
    /// <summary>
    ///组别
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Group {
      get { return group_; }
      set {
        group_ = value;
      }
    }

    /// <summary>Field number for the "index" field.</summary>
    public const int IndexFieldNumber = 4;
    private int index_;
    /// <summary>
    ///序号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ActivityId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ActivityId);
      }
      if (Day != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Day);
      }
      if (Group != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Group);
      }
      if (Index != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Index);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ActivityId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ActivityId);
      }
      if (Day != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Day);
      }
      if (Group != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Group);
      }
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Index);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ActivityId = input.ReadInt32();
            break;
          }
          case 16: {
            Day = input.ReadInt32();
            break;
          }
          case 24: {
            Group = input.ReadInt32();
            break;
          }
          case 32: {
            Index = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///返回七日狂欢活动数据变动信息
  /// </summary>
  public sealed class ResHappySevenDayActivityDataChange : pb::IMessage {
    private static readonly pb::MessageParser<ResHappySevenDayActivityDataChange> _parser = new pb::MessageParser<ResHappySevenDayActivityDataChange>(() => new ResHappySevenDayActivityDataChange());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ResHappySevenDayActivityDataChange> Parser { get { return _parser; } }

    /// <summary>Field number for the "activityId" field.</summary>
    public const int ActivityIdFieldNumber = 1;
    private int activityId_;
    /// <summary>
    ///活动id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ActivityId {
      get { return activityId_; }
      set {
        activityId_ = value;
      }
    }

    /// <summary>Field number for the "day" field.</summary>
    public const int DayFieldNumber = 2;
    private int day_;
    /// <summary>
    ///天数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Day {
      get { return day_; }
      set {
        day_ = value;
      }
    }

    /// <summary>Field number for the "group" field.</summary>
    public const int GroupFieldNumber = 3;
    private int group_;
    /// <summary>
    ///组别
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Group {
      get { return group_; }
      set {
        group_ = value;
      }
    }

    /// <summary>Field number for the "index" field.</summary>
    public const int IndexFieldNumber = 4;
    private int index_;
    /// <summary>
    ///序号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    /// <summary>Field number for the "completeCount" field.</summary>
    public const int CompleteCountFieldNumber = 5;
    private int completeCount_;
    /// <summary>
    ///完成数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CompleteCount {
      get { return completeCount_; }
      set {
        completeCount_ = value;
      }
    }

    /// <summary>Field number for the "total" field.</summary>
    public const int TotalFieldNumber = 6;
    private int total_;
    /// <summary>
    ///总进度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Total {
      get { return total_; }
      set {
        total_ = value;
      }
    }

    /// <summary>Field number for the "rewardState" field.</summary>
    public const int RewardStateFieldNumber = 7;
    private int rewardState_;
    /// <summary>
    ///领取状态 0 不可领 1 可领取 2 已领取
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RewardState {
      get { return rewardState_; }
      set {
        rewardState_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ActivityId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ActivityId);
      }
      if (Day != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Day);
      }
      if (Group != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Group);
      }
      if (Index != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Index);
      }
      if (CompleteCount != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(CompleteCount);
      }
      if (Total != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Total);
      }
      if (RewardState != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(RewardState);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ActivityId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ActivityId);
      }
      if (Day != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Day);
      }
      if (Group != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Group);
      }
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Index);
      }
      if (CompleteCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CompleteCount);
      }
      if (Total != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Total);
      }
      if (RewardState != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RewardState);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ActivityId = input.ReadInt32();
            break;
          }
          case 16: {
            Day = input.ReadInt32();
            break;
          }
          case 24: {
            Group = input.ReadInt32();
            break;
          }
          case 32: {
            Index = input.ReadInt32();
            break;
          }
          case 40: {
            CompleteCount = input.ReadInt32();
            break;
          }
          case 48: {
            Total = input.ReadInt32();
            break;
          }
          case 56: {
            RewardState = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///通知条件活动开启
  /// </summary>
  public sealed class ResOpenConditionActivity : pb::IMessage {
    private static readonly pb::MessageParser<ResOpenConditionActivity> _parser = new pb::MessageParser<ResOpenConditionActivity>(() => new ResOpenConditionActivity());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ResOpenConditionActivity> Parser { get { return _parser; } }

    /// <summary>Field number for the "activityList" field.</summary>
    public const int ActivityListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::ActivityV2.ActivityTimeInfo> _repeated_activityList_codec
        = pb::FieldCodec.ForMessage(10, global::ActivityV2.ActivityTimeInfo.Parser);
    private readonly pbc::RepeatedField<global::ActivityV2.ActivityTimeInfo> activityList_ = new pbc::RepeatedField<global::ActivityV2.ActivityTimeInfo>();
    /// <summary>
    ///活动列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ActivityV2.ActivityTimeInfo> ActivityList {
      get { return activityList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      activityList_.WriteTo(output, _repeated_activityList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += activityList_.CalculateSize(_repeated_activityList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            activityList_.AddEntriesFrom(input, _repeated_activityList_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求抽奖
  /// </summary>
  public sealed class ReqRaffle : pb::IMessage {
    private static readonly pb::MessageParser<ReqRaffle> _parser = new pb::MessageParser<ReqRaffle>(() => new ReqRaffle());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqRaffle> Parser { get { return _parser; } }

    /// <summary>Field number for the "activityId" field.</summary>
    public const int ActivityIdFieldNumber = 1;
    private int activityId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ActivityId {
      get { return activityId_; }
      set {
        activityId_ = value;
      }
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 2;
    private int count_;
    /// <summary>
    ///抽奖次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    /// <summary>Field number for the "costType" field.</summary>
    public const int CostTypeFieldNumber = 3;
    private int costType_;
    /// <summary>
    ///1.元宝 2.道具
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CostType {
      get { return costType_; }
      set {
        costType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ActivityId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ActivityId);
      }
      if (Count != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Count);
      }
      if (CostType != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(CostType);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ActivityId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ActivityId);
      }
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Count);
      }
      if (CostType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CostType);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ActivityId = input.ReadInt32();
            break;
          }
          case 16: {
            Count = input.ReadInt32();
            break;
          }
          case 24: {
            CostType = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///返回抽奖结果
  /// </summary>
  public sealed class ResRaffleResult : pb::IMessage {
    private static readonly pb::MessageParser<ResRaffleResult> _parser = new pb::MessageParser<ResRaffleResult>(() => new ResRaffleResult());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ResRaffleResult> Parser { get { return _parser; } }

    /// <summary>Field number for the "activityId" field.</summary>
    public const int ActivityIdFieldNumber = 1;
    private int activityId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ActivityId {
      get { return activityId_; }
      set {
        activityId_ = value;
      }
    }

    /// <summary>Field number for the "index" field.</summary>
    public const int IndexFieldNumber = 2;
    private int index_;
    /// <summary>
    ///转盘指针位置
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    /// <summary>Field number for the "raffleItemList" field.</summary>
    public const int RaffleItemListFieldNumber = 3;
    private static readonly pb::FieldCodec<global::ActivityV2.RaffleItem> _repeated_raffleItemList_codec
        = pb::FieldCodec.ForMessage(26, global::ActivityV2.RaffleItem.Parser);
    private readonly pbc::RepeatedField<global::ActivityV2.RaffleItem> raffleItemList_ = new pbc::RepeatedField<global::ActivityV2.RaffleItem>();
    /// <summary>
    ///抽奖获得道具
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ActivityV2.RaffleItem> RaffleItemList {
      get { return raffleItemList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ActivityId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ActivityId);
      }
      if (Index != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Index);
      }
      raffleItemList_.WriteTo(output, _repeated_raffleItemList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ActivityId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ActivityId);
      }
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Index);
      }
      size += raffleItemList_.CalculateSize(_repeated_raffleItemList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ActivityId = input.ReadInt32();
            break;
          }
          case 16: {
            Index = input.ReadInt32();
            break;
          }
          case 26: {
            raffleItemList_.AddEntriesFrom(input, _repeated_raffleItemList_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///通知活动boss状态
  /// </summary>
  public sealed class ResActivityBossState : pb::IMessage {
    private static readonly pb::MessageParser<ResActivityBossState> _parser = new pb::MessageParser<ResActivityBossState>(() => new ResActivityBossState());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ResActivityBossState> Parser { get { return _parser; } }

    /// <summary>Field number for the "duplicateId" field.</summary>
    public const int DuplicateIdFieldNumber = 1;
    private int duplicateId_;
    /// <summary>
    ///副本id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DuplicateId {
      get { return duplicateId_; }
      set {
        duplicateId_ = value;
      }
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 2;
    private int state_;
    /// <summary>
    ///0.未开启1.开启 2.boss死亡
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DuplicateId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(DuplicateId);
      }
      if (State != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(State);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DuplicateId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DuplicateId);
      }
      if (State != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(State);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            DuplicateId = input.ReadInt32();
            break;
          }
          case 16: {
            State = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///发送合服沙巴克行会信息
  /// </summary>
  public sealed class ResCombineSbkUnion : pb::IMessage {
    private static readonly pb::MessageParser<ResCombineSbkUnion> _parser = new pb::MessageParser<ResCombineSbkUnion>(() => new ResCombineSbkUnion());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ResCombineSbkUnion> Parser { get { return _parser; } }

    /// <summary>Field number for the "activityId" field.</summary>
    public const int ActivityIdFieldNumber = 1;
    private int activityId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ActivityId {
      get { return activityId_; }
      set {
        activityId_ = value;
      }
    }

    /// <summary>Field number for the "unionNameList" field.</summary>
    public const int UnionNameListFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_unionNameList_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> unionNameList_ = new pbc::RepeatedField<string>();
    /// <summary>
    ///行会名字
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> UnionNameList {
      get { return unionNameList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ActivityId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ActivityId);
      }
      unionNameList_.WriteTo(output, _repeated_unionNameList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ActivityId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ActivityId);
      }
      size += unionNameList_.CalculateSize(_repeated_unionNameList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ActivityId = input.ReadInt32();
            break;
          }
          case 18: {
            unionNameList_.AddEntriesFrom(input, _repeated_unionNameList_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///发送活动期间魂石消费信息
  /// </summary>
  public sealed class ResSoulStoneCost : pb::IMessage {
    private static readonly pb::MessageParser<ResSoulStoneCost> _parser = new pb::MessageParser<ResSoulStoneCost>(() => new ResSoulStoneCost());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ResSoulStoneCost> Parser { get { return _parser; } }

    /// <summary>Field number for the "activityId" field.</summary>
    public const int ActivityIdFieldNumber = 1;
    private int activityId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ActivityId {
      get { return activityId_; }
      set {
        activityId_ = value;
      }
    }

    /// <summary>Field number for the "costNum" field.</summary>
    public const int CostNumFieldNumber = 2;
    private int costNum_;
    /// <summary>
    ///消耗数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CostNum {
      get { return costNum_; }
      set {
        costNum_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ActivityId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ActivityId);
      }
      if (CostNum != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(CostNum);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ActivityId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ActivityId);
      }
      if (CostNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CostNum);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ActivityId = input.ReadInt32();
            break;
          }
          case 16: {
            CostNum = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///发送狂欢活动信息
  /// </summary>
  public sealed class ResCrazyHappy : pb::IMessage {
    private static readonly pb::MessageParser<ResCrazyHappy> _parser = new pb::MessageParser<ResCrazyHappy>(() => new ResCrazyHappy());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ResCrazyHappy> Parser { get { return _parser; } }

    /// <summary>Field number for the "activityId" field.</summary>
    public const int ActivityIdFieldNumber = 1;
    private int activityId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ActivityId {
      get { return activityId_; }
      set {
        activityId_ = value;
      }
    }

    /// <summary>Field number for the "crazyHappyInfo" field.</summary>
    public const int CrazyHappyInfoFieldNumber = 2;
    private static readonly pb::FieldCodec<global::ActivityV2.CrazyHappyInfo> _repeated_crazyHappyInfo_codec
        = pb::FieldCodec.ForMessage(18, global::ActivityV2.CrazyHappyInfo.Parser);
    private readonly pbc::RepeatedField<global::ActivityV2.CrazyHappyInfo> crazyHappyInfo_ = new pbc::RepeatedField<global::ActivityV2.CrazyHappyInfo>();
    /// <summary>
    ///狂欢活动数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ActivityV2.CrazyHappyInfo> CrazyHappyInfo {
      get { return crazyHappyInfo_; }
    }

    /// <summary>Field number for the "crazyHappyValue" field.</summary>
    public const int CrazyHappyValueFieldNumber = 3;
    private int crazyHappyValue_;
    /// <summary>
    ///狂欢值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CrazyHappyValue {
      get { return crazyHappyValue_; }
      set {
        crazyHappyValue_ = value;
      }
    }

    /// <summary>Field number for the "hasDrawIndexList" field.</summary>
    public const int HasDrawIndexListFieldNumber = 4;
    private static readonly pb::FieldCodec<int> _repeated_hasDrawIndexList_codec
        = pb::FieldCodec.ForInt32(34);
    private readonly pbc::RepeatedField<int> hasDrawIndexList_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///已领取index列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> HasDrawIndexList {
      get { return hasDrawIndexList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ActivityId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ActivityId);
      }
      crazyHappyInfo_.WriteTo(output, _repeated_crazyHappyInfo_codec);
      if (CrazyHappyValue != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(CrazyHappyValue);
      }
      hasDrawIndexList_.WriteTo(output, _repeated_hasDrawIndexList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ActivityId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ActivityId);
      }
      size += crazyHappyInfo_.CalculateSize(_repeated_crazyHappyInfo_codec);
      if (CrazyHappyValue != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CrazyHappyValue);
      }
      size += hasDrawIndexList_.CalculateSize(_repeated_hasDrawIndexList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ActivityId = input.ReadInt32();
            break;
          }
          case 18: {
            crazyHappyInfo_.AddEntriesFrom(input, _repeated_crazyHappyInfo_codec);
            break;
          }
          case 24: {
            CrazyHappyValue = input.ReadInt32();
            break;
          }
          case 34:
          case 32: {
            hasDrawIndexList_.AddEntriesFrom(input, _repeated_hasDrawIndexList_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求领取狂欢活动奖励
  /// </summary>
  public sealed class ReqDrawCrazyHappyReward : pb::IMessage {
    private static readonly pb::MessageParser<ReqDrawCrazyHappyReward> _parser = new pb::MessageParser<ReqDrawCrazyHappyReward>(() => new ReqDrawCrazyHappyReward());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqDrawCrazyHappyReward> Parser { get { return _parser; } }

    /// <summary>Field number for the "activityId" field.</summary>
    public const int ActivityIdFieldNumber = 1;
    private int activityId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ActivityId {
      get { return activityId_; }
      set {
        activityId_ = value;
      }
    }

    /// <summary>Field number for the "group" field.</summary>
    public const int GroupFieldNumber = 2;
    private int group_;
    /// <summary>
    ///组别 总奖励组别为-1,狂欢转盘为-2
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Group {
      get { return group_; }
      set {
        group_ = value;
      }
    }

    /// <summary>Field number for the "index" field.</summary>
    public const int IndexFieldNumber = 3;
    private int index_;
    /// <summary>
    ///编号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ActivityId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ActivityId);
      }
      if (Group != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Group);
      }
      if (Index != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Index);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ActivityId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ActivityId);
      }
      if (Group != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Group);
      }
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Index);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ActivityId = input.ReadInt32();
            break;
          }
          case 16: {
            Group = input.ReadInt32();
            break;
          }
          case 24: {
            Index = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///狂欢活动数据变化信息
  /// </summary>
  public sealed class ResCrazyHappyChangeInfo : pb::IMessage {
    private static readonly pb::MessageParser<ResCrazyHappyChangeInfo> _parser = new pb::MessageParser<ResCrazyHappyChangeInfo>(() => new ResCrazyHappyChangeInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ResCrazyHappyChangeInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "activityId" field.</summary>
    public const int ActivityIdFieldNumber = 1;
    private int activityId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ActivityId {
      get { return activityId_; }
      set {
        activityId_ = value;
      }
    }

    /// <summary>Field number for the "crazyHappyInfo" field.</summary>
    public const int CrazyHappyInfoFieldNumber = 2;
    private static readonly pb::FieldCodec<global::ActivityV2.CrazyHappyInfo> _repeated_crazyHappyInfo_codec
        = pb::FieldCodec.ForMessage(18, global::ActivityV2.CrazyHappyInfo.Parser);
    private readonly pbc::RepeatedField<global::ActivityV2.CrazyHappyInfo> crazyHappyInfo_ = new pbc::RepeatedField<global::ActivityV2.CrazyHappyInfo>();
    /// <summary>
    ///组别 总奖励组别为-1,狂欢转盘为-2
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ActivityV2.CrazyHappyInfo> CrazyHappyInfo {
      get { return crazyHappyInfo_; }
    }

    /// <summary>Field number for the "crazyHappyValue" field.</summary>
    public const int CrazyHappyValueFieldNumber = 3;
    private int crazyHappyValue_;
    /// <summary>
    ///编号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CrazyHappyValue {
      get { return crazyHappyValue_; }
      set {
        crazyHappyValue_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ActivityId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ActivityId);
      }
      crazyHappyInfo_.WriteTo(output, _repeated_crazyHappyInfo_codec);
      if (CrazyHappyValue != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(CrazyHappyValue);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ActivityId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ActivityId);
      }
      size += crazyHappyInfo_.CalculateSize(_repeated_crazyHappyInfo_codec);
      if (CrazyHappyValue != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CrazyHappyValue);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ActivityId = input.ReadInt32();
            break;
          }
          case 18: {
            crazyHappyInfo_.AddEntriesFrom(input, _repeated_crazyHappyInfo_codec);
            break;
          }
          case 24: {
            CrazyHappyValue = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///领取总奖励返回信息
  /// </summary>
  public sealed class ResCrazyHappyReward : pb::IMessage {
    private static readonly pb::MessageParser<ResCrazyHappyReward> _parser = new pb::MessageParser<ResCrazyHappyReward>(() => new ResCrazyHappyReward());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ResCrazyHappyReward> Parser { get { return _parser; } }

    /// <summary>Field number for the "activityId" field.</summary>
    public const int ActivityIdFieldNumber = 1;
    private int activityId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ActivityId {
      get { return activityId_; }
      set {
        activityId_ = value;
      }
    }

    /// <summary>Field number for the "hasDrawIndexList" field.</summary>
    public const int HasDrawIndexListFieldNumber = 2;
    private static readonly pb::FieldCodec<int> _repeated_hasDrawIndexList_codec
        = pb::FieldCodec.ForInt32(18);
    private readonly pbc::RepeatedField<int> hasDrawIndexList_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///已领取index列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> HasDrawIndexList {
      get { return hasDrawIndexList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ActivityId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ActivityId);
      }
      hasDrawIndexList_.WriteTo(output, _repeated_hasDrawIndexList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ActivityId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ActivityId);
      }
      size += hasDrawIndexList_.CalculateSize(_repeated_hasDrawIndexList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ActivityId = input.ReadInt32();
            break;
          }
          case 18:
          case 16: {
            hasDrawIndexList_.AddEntriesFrom(input, _repeated_hasDrawIndexList_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///限时秒杀剩余数量
  /// </summary>
  public sealed class ResLimitBuyCount : pb::IMessage {
    private static readonly pb::MessageParser<ResLimitBuyCount> _parser = new pb::MessageParser<ResLimitBuyCount>(() => new ResLimitBuyCount());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ResLimitBuyCount> Parser { get { return _parser; } }

    /// <summary>Field number for the "ShouHuLimitBuyInfoList" field.</summary>
    public const int ShouHuLimitBuyInfoListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::ActivityV2.ShouHuLimitBuyInfo> _repeated_shouHuLimitBuyInfoList_codec
        = pb::FieldCodec.ForMessage(10, global::ActivityV2.ShouHuLimitBuyInfo.Parser);
    private readonly pbc::RepeatedField<global::ActivityV2.ShouHuLimitBuyInfo> shouHuLimitBuyInfoList_ = new pbc::RepeatedField<global::ActivityV2.ShouHuLimitBuyInfo>();
    /// <summary>
    ///守护秒杀活动列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ActivityV2.ShouHuLimitBuyInfo> ShouHuLimitBuyInfoList {
      get { return shouHuLimitBuyInfoList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      shouHuLimitBuyInfoList_.WriteTo(output, _repeated_shouHuLimitBuyInfoList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += shouHuLimitBuyInfoList_.CalculateSize(_repeated_shouHuLimitBuyInfoList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            shouHuLimitBuyInfoList_.AddEntriesFrom(input, _repeated_shouHuLimitBuyInfoList_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///发送神秘商城积分
  /// </summary>
  public sealed class ResMysticStorePoint : pb::IMessage {
    private static readonly pb::MessageParser<ResMysticStorePoint> _parser = new pb::MessageParser<ResMysticStorePoint>(() => new ResMysticStorePoint());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ResMysticStorePoint> Parser { get { return _parser; } }

    /// <summary>Field number for the "activityId" field.</summary>
    public const int ActivityIdFieldNumber = 1;
    private int activityId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ActivityId {
      get { return activityId_; }
      set {
        activityId_ = value;
      }
    }

    /// <summary>Field number for the "point" field.</summary>
    public const int PointFieldNumber = 2;
    private int point_;
    /// <summary>
    ///积分
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Point {
      get { return point_; }
      set {
        point_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ActivityId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ActivityId);
      }
      if (Point != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Point);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ActivityId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ActivityId);
      }
      if (Point != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Point);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ActivityId = input.ReadInt32();
            break;
          }
          case 16: {
            Point = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///发送幸运转盘抽奖次数
  /// </summary>
  public sealed class ResRaffCount : pb::IMessage {
    private static readonly pb::MessageParser<ResRaffCount> _parser = new pb::MessageParser<ResRaffCount>(() => new ResRaffCount());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ResRaffCount> Parser { get { return _parser; } }

    /// <summary>Field number for the "activityId" field.</summary>
    public const int ActivityIdFieldNumber = 1;
    private int activityId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ActivityId {
      get { return activityId_; }
      set {
        activityId_ = value;
      }
    }

    /// <summary>Field number for the "totalCount" field.</summary>
    public const int TotalCountFieldNumber = 2;
    private int totalCount_;
    /// <summary>
    ///转盘总抽奖次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TotalCount {
      get { return totalCount_; }
      set {
        totalCount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ActivityId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ActivityId);
      }
      if (TotalCount != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(TotalCount);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ActivityId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ActivityId);
      }
      if (TotalCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotalCount);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ActivityId = input.ReadInt32();
            break;
          }
          case 16: {
            TotalCount = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///发送幸运转盘抽奖次数
  /// </summary>
  public sealed class ResInvestPlan : pb::IMessage {
    private static readonly pb::MessageParser<ResInvestPlan> _parser = new pb::MessageParser<ResInvestPlan>(() => new ResInvestPlan());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ResInvestPlan> Parser { get { return _parser; } }

    /// <summary>Field number for the "activityId" field.</summary>
    public const int ActivityIdFieldNumber = 1;
    private int activityId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ActivityId {
      get { return activityId_; }
      set {
        activityId_ = value;
      }
    }

    /// <summary>Field number for the "beginTime" field.</summary>
    public const int BeginTimeFieldNumber = 2;
    private int beginTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BeginTime {
      get { return beginTime_; }
      set {
        beginTime_ = value;
      }
    }

    /// <summary>Field number for the "endTime" field.</summary>
    public const int EndTimeFieldNumber = 3;
    private int endTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EndTime {
      get { return endTime_; }
      set {
        endTime_ = value;
      }
    }

    /// <summary>Field number for the "hasAttend" field.</summary>
    public const int HasAttendFieldNumber = 4;
    private bool hasAttend_;
    /// <summary>
    ///是否已参与
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAttend {
      get { return hasAttend_; }
      set {
        hasAttend_ = value;
      }
    }

    /// <summary>Field number for the "hasDrawList" field.</summary>
    public const int HasDrawListFieldNumber = 5;
    private static readonly pb::FieldCodec<int> _repeated_hasDrawList_codec
        = pb::FieldCodec.ForInt32(42);
    private readonly pbc::RepeatedField<int> hasDrawList_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///已领取的天数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> HasDrawList {
      get { return hasDrawList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ActivityId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ActivityId);
      }
      if (BeginTime != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(BeginTime);
      }
      if (EndTime != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(EndTime);
      }
      if (HasAttend != false) {
        output.WriteRawTag(32);
        output.WriteBool(HasAttend);
      }
      hasDrawList_.WriteTo(output, _repeated_hasDrawList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ActivityId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ActivityId);
      }
      if (BeginTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BeginTime);
      }
      if (EndTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EndTime);
      }
      if (HasAttend != false) {
        size += 1 + 1;
      }
      size += hasDrawList_.CalculateSize(_repeated_hasDrawList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ActivityId = input.ReadInt32();
            break;
          }
          case 16: {
            BeginTime = input.ReadInt32();
            break;
          }
          case 24: {
            EndTime = input.ReadInt32();
            break;
          }
          case 32: {
            HasAttend = input.ReadBool();
            break;
          }
          case 42:
          case 40: {
            hasDrawList_.AddEntriesFrom(input, _repeated_hasDrawList_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求领取投资返利奖励
  /// </summary>
  public sealed class ReqDrawInvestPlanReward : pb::IMessage {
    private static readonly pb::MessageParser<ReqDrawInvestPlanReward> _parser = new pb::MessageParser<ReqDrawInvestPlanReward>(() => new ReqDrawInvestPlanReward());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqDrawInvestPlanReward> Parser { get { return _parser; } }

    /// <summary>Field number for the "activityId" field.</summary>
    public const int ActivityIdFieldNumber = 1;
    private int activityId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ActivityId {
      get { return activityId_; }
      set {
        activityId_ = value;
      }
    }

    /// <summary>Field number for the "dayNo" field.</summary>
    public const int DayNoFieldNumber = 2;
    private int dayNo_;
    /// <summary>
    ///第n天
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DayNo {
      get { return dayNo_; }
      set {
        dayNo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ActivityId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ActivityId);
      }
      if (DayNo != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(DayNo);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ActivityId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ActivityId);
      }
      if (DayNo != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DayNo);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ActivityId = input.ReadInt32();
            break;
          }
          case 16: {
            DayNo = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求狂欢转盘抽奖
  /// </summary>
  public sealed class ReqCrazyRaffle : pb::IMessage {
    private static readonly pb::MessageParser<ReqCrazyRaffle> _parser = new pb::MessageParser<ReqCrazyRaffle>(() => new ReqCrazyRaffle());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqCrazyRaffle> Parser { get { return _parser; } }

    /// <summary>Field number for the "activityId" field.</summary>
    public const int ActivityIdFieldNumber = 1;
    private int activityId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ActivityId {
      get { return activityId_; }
      set {
        activityId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ActivityId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ActivityId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ActivityId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ActivityId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ActivityId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///返回狂欢转盘信息
  /// </summary>
  public sealed class ResCrazyRaffleInfo : pb::IMessage {
    private static readonly pb::MessageParser<ResCrazyRaffleInfo> _parser = new pb::MessageParser<ResCrazyRaffleInfo>(() => new ResCrazyRaffleInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ResCrazyRaffleInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "activityId" field.</summary>
    public const int ActivityIdFieldNumber = 1;
    private int activityId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ActivityId {
      get { return activityId_; }
      set {
        activityId_ = value;
      }
    }

    /// <summary>Field number for the "hasIndexList" field.</summary>
    public const int HasIndexListFieldNumber = 2;
    private static readonly pb::FieldCodec<int> _repeated_hasIndexList_codec
        = pb::FieldCodec.ForInt32(18);
    private readonly pbc::RepeatedField<int> hasIndexList_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///已经抽到的位置列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> HasIndexList {
      get { return hasIndexList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ActivityId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ActivityId);
      }
      hasIndexList_.WriteTo(output, _repeated_hasIndexList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ActivityId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ActivityId);
      }
      size += hasIndexList_.CalculateSize(_repeated_hasIndexList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ActivityId = input.ReadInt32();
            break;
          }
          case 18:
          case 16: {
            hasIndexList_.AddEntriesFrom(input, _repeated_hasIndexList_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///返回成长试炼信息
  /// </summary>
  public sealed class ResGrowTrailInfo : pb::IMessage {
    private static readonly pb::MessageParser<ResGrowTrailInfo> _parser = new pb::MessageParser<ResGrowTrailInfo>(() => new ResGrowTrailInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ResGrowTrailInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "growTrailDailyInfos" field.</summary>
    public const int GrowTrailDailyInfosFieldNumber = 1;
    private static readonly pb::FieldCodec<global::ActivityV2.GrowTrailActivityInfo> _repeated_growTrailDailyInfos_codec
        = pb::FieldCodec.ForMessage(10, global::ActivityV2.GrowTrailActivityInfo.Parser);
    private readonly pbc::RepeatedField<global::ActivityV2.GrowTrailActivityInfo> growTrailDailyInfos_ = new pbc::RepeatedField<global::ActivityV2.GrowTrailActivityInfo>();
    /// <summary>
    ///成长试炼活动信息列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ActivityV2.GrowTrailActivityInfo> GrowTrailDailyInfos {
      get { return growTrailDailyInfos_; }
    }

    /// <summary>Field number for the "growTrailFinalInfos" field.</summary>
    public const int GrowTrailFinalInfosFieldNumber = 2;
    private static readonly pb::FieldCodec<global::ActivityV2.GrowTrailFinalInfo> _repeated_growTrailFinalInfos_codec
        = pb::FieldCodec.ForMessage(18, global::ActivityV2.GrowTrailFinalInfo.Parser);
    private readonly pbc::RepeatedField<global::ActivityV2.GrowTrailFinalInfo> growTrailFinalInfos_ = new pbc::RepeatedField<global::ActivityV2.GrowTrailFinalInfo>();
    /// <summary>
    ///终极大奖信息列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ActivityV2.GrowTrailFinalInfo> GrowTrailFinalInfos {
      get { return growTrailFinalInfos_; }
    }

    /// <summary>Field number for the "completeCount" field.</summary>
    public const int CompleteCountFieldNumber = 3;
    private int completeCount_;
    /// <summary>
    ///完成数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CompleteCount {
      get { return completeCount_; }
      set {
        completeCount_ = value;
      }
    }

    /// <summary>Field number for the "activityId" field.</summary>
    public const int ActivityIdFieldNumber = 4;
    private int activityId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ActivityId {
      get { return activityId_; }
      set {
        activityId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      growTrailDailyInfos_.WriteTo(output, _repeated_growTrailDailyInfos_codec);
      growTrailFinalInfos_.WriteTo(output, _repeated_growTrailFinalInfos_codec);
      if (CompleteCount != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(CompleteCount);
      }
      if (ActivityId != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(ActivityId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += growTrailDailyInfos_.CalculateSize(_repeated_growTrailDailyInfos_codec);
      size += growTrailFinalInfos_.CalculateSize(_repeated_growTrailFinalInfos_codec);
      if (CompleteCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CompleteCount);
      }
      if (ActivityId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ActivityId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            growTrailDailyInfos_.AddEntriesFrom(input, _repeated_growTrailDailyInfos_codec);
            break;
          }
          case 18: {
            growTrailFinalInfos_.AddEntriesFrom(input, _repeated_growTrailFinalInfos_codec);
            break;
          }
          case 24: {
            CompleteCount = input.ReadInt32();
            break;
          }
          case 32: {
            ActivityId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///返回成长试炼活动数据变化信息
  /// </summary>
  public sealed class ResGrowTrailDataChange : pb::IMessage {
    private static readonly pb::MessageParser<ResGrowTrailDataChange> _parser = new pb::MessageParser<ResGrowTrailDataChange>(() => new ResGrowTrailDataChange());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ResGrowTrailDataChange> Parser { get { return _parser; } }

    /// <summary>Field number for the "growTrailDataInfo" field.</summary>
    public const int GrowTrailDataInfoFieldNumber = 1;
    private global::ActivityV2.GrowTrailActivityInfo growTrailDataInfo_;
    /// <summary>
    ///试炼变化数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ActivityV2.GrowTrailActivityInfo GrowTrailDataInfo {
      get { return growTrailDataInfo_; }
      set {
        growTrailDataInfo_ = value;
      }
    }

    /// <summary>Field number for the "completeCount" field.</summary>
    public const int CompleteCountFieldNumber = 2;
    private int completeCount_;
    /// <summary>
    ///完成数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CompleteCount {
      get { return completeCount_; }
      set {
        completeCount_ = value;
      }
    }

    /// <summary>Field number for the "activityId" field.</summary>
    public const int ActivityIdFieldNumber = 3;
    private int activityId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ActivityId {
      get { return activityId_; }
      set {
        activityId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (growTrailDataInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(GrowTrailDataInfo);
      }
      if (CompleteCount != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(CompleteCount);
      }
      if (ActivityId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ActivityId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (growTrailDataInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GrowTrailDataInfo);
      }
      if (CompleteCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CompleteCount);
      }
      if (ActivityId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ActivityId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (growTrailDataInfo_ == null) {
              growTrailDataInfo_ = new global::ActivityV2.GrowTrailActivityInfo();
            }
            input.ReadMessage(growTrailDataInfo_);
            break;
          }
          case 16: {
            CompleteCount = input.ReadInt32();
            break;
          }
          case 24: {
            ActivityId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求领取成长试炼奖励
  /// </summary>
  public sealed class ReqDrawGrowTrailReward : pb::IMessage {
    private static readonly pb::MessageParser<ReqDrawGrowTrailReward> _parser = new pb::MessageParser<ReqDrawGrowTrailReward>(() => new ReqDrawGrowTrailReward());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqDrawGrowTrailReward> Parser { get { return _parser; } }

    /// <summary>Field number for the "activityId" field.</summary>
    public const int ActivityIdFieldNumber = 1;
    private int activityId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ActivityId {
      get { return activityId_; }
      set {
        activityId_ = value;
      }
    }

    /// <summary>Field number for the "dayNo" field.</summary>
    public const int DayNoFieldNumber = 2;
    private int dayNo_;
    /// <summary>
    ///天数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DayNo {
      get { return dayNo_; }
      set {
        dayNo_ = value;
      }
    }

    /// <summary>Field number for the "group" field.</summary>
    public const int GroupFieldNumber = 3;
    private int group_;
    /// <summary>
    ///组
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Group {
      get { return group_; }
      set {
        group_ = value;
      }
    }

    /// <summary>Field number for the "index" field.</summary>
    public const int IndexFieldNumber = 4;
    private int index_;
    /// <summary>
    ///编号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ActivityId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ActivityId);
      }
      if (DayNo != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(DayNo);
      }
      if (Group != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Group);
      }
      if (Index != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Index);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ActivityId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ActivityId);
      }
      if (DayNo != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DayNo);
      }
      if (Group != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Group);
      }
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Index);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ActivityId = input.ReadInt32();
            break;
          }
          case 16: {
            DayNo = input.ReadInt32();
            break;
          }
          case 24: {
            Group = input.ReadInt32();
            break;
          }
          case 32: {
            Index = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求领取成长试炼终极奖励
  /// </summary>
  public sealed class ReqDrawGrowTrailFinalReward : pb::IMessage {
    private static readonly pb::MessageParser<ReqDrawGrowTrailFinalReward> _parser = new pb::MessageParser<ReqDrawGrowTrailFinalReward>(() => new ReqDrawGrowTrailFinalReward());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqDrawGrowTrailFinalReward> Parser { get { return _parser; } }

    /// <summary>Field number for the "activityId" field.</summary>
    public const int ActivityIdFieldNumber = 1;
    private int activityId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ActivityId {
      get { return activityId_; }
      set {
        activityId_ = value;
      }
    }

    /// <summary>Field number for the "index" field.</summary>
    public const int IndexFieldNumber = 2;
    private int index_;
    /// <summary>
    ///编号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ActivityId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ActivityId);
      }
      if (Index != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Index);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ActivityId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ActivityId);
      }
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Index);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ActivityId = input.ReadInt32();
            break;
          }
          case 16: {
            Index = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///返回成长试炼大奖成功领取
  /// </summary>
  public sealed class ResGrowTrailFinalRewardDrawSuccess : pb::IMessage {
    private static readonly pb::MessageParser<ResGrowTrailFinalRewardDrawSuccess> _parser = new pb::MessageParser<ResGrowTrailFinalRewardDrawSuccess>(() => new ResGrowTrailFinalRewardDrawSuccess());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ResGrowTrailFinalRewardDrawSuccess> Parser { get { return _parser; } }

    /// <summary>Field number for the "activityId" field.</summary>
    public const int ActivityIdFieldNumber = 1;
    private int activityId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ActivityId {
      get { return activityId_; }
      set {
        activityId_ = value;
      }
    }

    /// <summary>Field number for the "index" field.</summary>
    public const int IndexFieldNumber = 2;
    private int index_;
    /// <summary>
    ///编号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ActivityId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ActivityId);
      }
      if (Index != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Index);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ActivityId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ActivityId);
      }
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Index);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ActivityId = input.ReadInt32();
            break;
          }
          case 16: {
            Index = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求设置自选转盘
  /// </summary>
  public sealed class ReqSetChoseTurntable : pb::IMessage {
    private static readonly pb::MessageParser<ReqSetChoseTurntable> _parser = new pb::MessageParser<ReqSetChoseTurntable>(() => new ReqSetChoseTurntable());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqSetChoseTurntable> Parser { get { return _parser; } }

    /// <summary>Field number for the "activityId" field.</summary>
    public const int ActivityIdFieldNumber = 1;
    private int activityId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ActivityId {
      get { return activityId_; }
      set {
        activityId_ = value;
      }
    }

    /// <summary>Field number for the "cfgIdList" field.</summary>
    public const int CfgIdListFieldNumber = 2;
    private static readonly pb::FieldCodec<int> _repeated_cfgIdList_codec
        = pb::FieldCodec.ForInt32(18);
    private readonly pbc::RepeatedField<int> cfgIdList_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///配置id集合
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> CfgIdList {
      get { return cfgIdList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ActivityId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ActivityId);
      }
      cfgIdList_.WriteTo(output, _repeated_cfgIdList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ActivityId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ActivityId);
      }
      size += cfgIdList_.CalculateSize(_repeated_cfgIdList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ActivityId = input.ReadInt32();
            break;
          }
          case 18:
          case 16: {
            cfgIdList_.AddEntriesFrom(input, _repeated_cfgIdList_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///返回自选转盘信息
  /// </summary>
  public sealed class ResChoseTurntable : pb::IMessage {
    private static readonly pb::MessageParser<ResChoseTurntable> _parser = new pb::MessageParser<ResChoseTurntable>(() => new ResChoseTurntable());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ResChoseTurntable> Parser { get { return _parser; } }

    /// <summary>Field number for the "activityId" field.</summary>
    public const int ActivityIdFieldNumber = 1;
    private int activityId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ActivityId {
      get { return activityId_; }
      set {
        activityId_ = value;
      }
    }

    /// <summary>Field number for the "cfgIdList" field.</summary>
    public const int CfgIdListFieldNumber = 2;
    private static readonly pb::FieldCodec<int> _repeated_cfgIdList_codec
        = pb::FieldCodec.ForInt32(18);
    private readonly pbc::RepeatedField<int> cfgIdList_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///配置id集合
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> CfgIdList {
      get { return cfgIdList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ActivityId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ActivityId);
      }
      cfgIdList_.WriteTo(output, _repeated_cfgIdList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ActivityId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ActivityId);
      }
      size += cfgIdList_.CalculateSize(_repeated_cfgIdList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ActivityId = input.ReadInt32();
            break;
          }
          case 18:
          case 16: {
            cfgIdList_.AddEntriesFrom(input, _repeated_cfgIdList_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///限时特惠购买请求
  /// </summary>
  public sealed class BuyLimitedOfferRequest : pb::IMessage {
    private static readonly pb::MessageParser<BuyLimitedOfferRequest> _parser = new pb::MessageParser<BuyLimitedOfferRequest>(() => new BuyLimitedOfferRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BuyLimitedOfferRequest> Parser { get { return _parser; } }

    /// <summary>Field number for the "activityId" field.</summary>
    public const int ActivityIdFieldNumber = 1;
    private int activityId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ActivityId {
      get { return activityId_; }
      set {
        activityId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ActivityId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ActivityId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ActivityId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ActivityId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ActivityId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class ResSaleGiftInfo : pb::IMessage {
    private static readonly pb::MessageParser<ResSaleGiftInfo> _parser = new pb::MessageParser<ResSaleGiftInfo>(() => new ResSaleGiftInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ResSaleGiftInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "info" field.</summary>
    public const int InfoFieldNumber = 1;
    private static readonly pb::FieldCodec<global::ActivityV2.BuyLimitInfo> _repeated_info_codec
        = pb::FieldCodec.ForMessage(10, global::ActivityV2.BuyLimitInfo.Parser);
    private readonly pbc::RepeatedField<global::ActivityV2.BuyLimitInfo> info_ = new pbc::RepeatedField<global::ActivityV2.BuyLimitInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ActivityV2.BuyLimitInfo> Info {
      get { return info_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      info_.WriteTo(output, _repeated_info_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += info_.CalculateSize(_repeated_info_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            info_.AddEntriesFrom(input, _repeated_info_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class BuyLimitInfo : pb::IMessage {
    private static readonly pb::MessageParser<BuyLimitInfo> _parser = new pb::MessageParser<BuyLimitInfo>(() => new BuyLimitInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BuyLimitInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "activityId" field.</summary>
    public const int ActivityIdFieldNumber = 1;
    private int activityId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ActivityId {
      get { return activityId_; }
      set {
        activityId_ = value;
      }
    }

    /// <summary>Field number for the "isGetReward" field.</summary>
    public const int IsGetRewardFieldNumber = 2;
    private bool isGetReward_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsGetReward {
      get { return isGetReward_; }
      set {
        isGetReward_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ActivityId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ActivityId);
      }
      if (IsGetReward != false) {
        output.WriteRawTag(16);
        output.WriteBool(IsGetReward);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ActivityId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ActivityId);
      }
      if (IsGetReward != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ActivityId = input.ReadInt32();
            break;
          }
          case 16: {
            IsGetReward = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed class ActivityOpenTable : pb::IMessage {
    private static readonly pb::MessageParser<ActivityOpenTable> _parser = new pb::MessageParser<ActivityOpenTable>(() => new ActivityOpenTable());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ActivityOpenTable> Parser { get { return _parser; } }

    /// <summary>Field number for the "activityId" field.</summary>
    public const int ActivityIdFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_activityId_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> activityId_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> ActivityId {
      get { return activityId_; }
    }

    /// <summary>Field number for the "group" field.</summary>
    public const int GroupFieldNumber = 2;
    private int group_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Group {
      get { return group_; }
      set {
        group_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      activityId_.WriteTo(output, _repeated_activityId_codec);
      if (Group != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Group);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += activityId_.CalculateSize(_repeated_activityId_codec);
      if (Group != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Group);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            activityId_.AddEntriesFrom(input, _repeated_activityId_codec);
            break;
          }
          case 16: {
            Group = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class ActivityOpenMsgRequest : pb::IMessage {
    private static readonly pb::MessageParser<ActivityOpenMsgRequest> _parser = new pb::MessageParser<ActivityOpenMsgRequest>(() => new ActivityOpenMsgRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ActivityOpenMsgRequest> Parser { get { return _parser; } }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private int type_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Type);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Type = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///怪物攻城排行榜
  /// </summary>
  public sealed class ResActivityMonsterRankScoreList : pb::IMessage {
    private static readonly pb::MessageParser<ResActivityMonsterRankScoreList> _parser = new pb::MessageParser<ResActivityMonsterRankScoreList>(() => new ResActivityMonsterRankScoreList());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ResActivityMonsterRankScoreList> Parser { get { return _parser; } }

    /// <summary>Field number for the "info" field.</summary>
    public const int InfoFieldNumber = 1;
    private static readonly pb::FieldCodec<global::ActivityV2.RankInfo> _repeated_info_codec
        = pb::FieldCodec.ForMessage(10, global::ActivityV2.RankInfo.Parser);
    private readonly pbc::RepeatedField<global::ActivityV2.RankInfo> info_ = new pbc::RepeatedField<global::ActivityV2.RankInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ActivityV2.RankInfo> Info {
      get { return info_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      info_.WriteTo(output, _repeated_info_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += info_.CalculateSize(_repeated_info_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            info_.AddEntriesFrom(input, _repeated_info_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///怪物攻城进攻信息下发
  /// </summary>
  public sealed class ResActivityMonsterAttackTimesInfo : pb::IMessage {
    private static readonly pb::MessageParser<ResActivityMonsterAttackTimesInfo> _parser = new pb::MessageParser<ResActivityMonsterAttackTimesInfo>(() => new ResActivityMonsterAttackTimesInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ResActivityMonsterAttackTimesInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "curTimes" field.</summary>
    public const int CurTimesFieldNumber = 1;
    private int curTimes_;
    /// <summary>
    ///当前波数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurTimes {
      get { return curTimes_; }
      set {
        curTimes_ = value;
      }
    }

    /// <summary>Field number for the "subTime" field.</summary>
    public const int SubTimeFieldNumber = 2;
    private long subTime_;
    /// <summary>
    ///剩余时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long SubTime {
      get { return subTime_; }
      set {
        subTime_ = value;
      }
    }

    /// <summary>Field number for the "waveId" field.</summary>
    public const int WaveIdFieldNumber = 3;
    private static readonly pb::FieldCodec<int> _repeated_waveId_codec
        = pb::FieldCodec.ForInt32(26);
    private readonly pbc::RepeatedField<int> waveId_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///波数id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> WaveId {
      get { return waveId_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CurTimes != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CurTimes);
      }
      if (SubTime != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(SubTime);
      }
      waveId_.WriteTo(output, _repeated_waveId_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CurTimes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurTimes);
      }
      if (SubTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(SubTime);
      }
      size += waveId_.CalculateSize(_repeated_waveId_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            CurTimes = input.ReadInt32();
            break;
          }
          case 16: {
            SubTime = input.ReadInt64();
            break;
          }
          case 26:
          case 24: {
            waveId_.AddEntriesFrom(input, _repeated_waveId_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///怪物攻城活动阶段
  /// </summary>
  public sealed class ResActivityMonsterStage : pb::IMessage {
    private static readonly pb::MessageParser<ResActivityMonsterStage> _parser = new pb::MessageParser<ResActivityMonsterStage>(() => new ResActivityMonsterStage());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ResActivityMonsterStage> Parser { get { return _parser; } }

    /// <summary>Field number for the "stage" field.</summary>
    public const int StageFieldNumber = 1;
    private int stage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Stage {
      get { return stage_; }
      set {
        stage_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Stage != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Stage);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Stage != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Stage);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Stage = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///怪物攻城BOSS击杀排行榜
  /// </summary>
  public sealed class ResActivityMonsterKillBossRank : pb::IMessage {
    private static readonly pb::MessageParser<ResActivityMonsterKillBossRank> _parser = new pb::MessageParser<ResActivityMonsterKillBossRank>(() => new ResActivityMonsterKillBossRank());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ResActivityMonsterKillBossRank> Parser { get { return _parser; } }

    /// <summary>Field number for the "info" field.</summary>
    public const int InfoFieldNumber = 1;
    private static readonly pb::FieldCodec<global::ActivityV2.RankInfo> _repeated_info_codec
        = pb::FieldCodec.ForMessage(10, global::ActivityV2.RankInfo.Parser);
    private readonly pbc::RepeatedField<global::ActivityV2.RankInfo> info_ = new pbc::RepeatedField<global::ActivityV2.RankInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ActivityV2.RankInfo> Info {
      get { return info_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      info_.WriteTo(output, _repeated_info_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += info_.CalculateSize(_repeated_info_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            info_.AddEntriesFrom(input, _repeated_info_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///怪物攻城采集宝箱
  /// </summary>
  public sealed class ReqGatherActivityMonsterBox : pb::IMessage {
    private static readonly pb::MessageParser<ReqGatherActivityMonsterBox> _parser = new pb::MessageParser<ReqGatherActivityMonsterBox>(() => new ReqGatherActivityMonsterBox());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqGatherActivityMonsterBox> Parser { get { return _parser; } }

    /// <summary>Field number for the "box" field.</summary>
    public const int BoxFieldNumber = 1;
    private long box_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Box {
      get { return box_; }
      set {
        box_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Box != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Box);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Box != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Box);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Box = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///保卫国王活动面板
  /// </summary>
  public sealed class ResDefendKingActivityInfo : pb::IMessage {
    private static readonly pb::MessageParser<ResDefendKingActivityInfo> _parser = new pb::MessageParser<ResDefendKingActivityInfo>(() => new ResDefendKingActivityInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ResDefendKingActivityInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "list" field.</summary>
    public const int ListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::ActivityV2.DefendUnionInfo> _repeated_list_codec
        = pb::FieldCodec.ForMessage(10, global::ActivityV2.DefendUnionInfo.Parser);
    private readonly pbc::RepeatedField<global::ActivityV2.DefendUnionInfo> list_ = new pbc::RepeatedField<global::ActivityV2.DefendUnionInfo>();
    /// <summary>
    ///行会排行(已排序)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ActivityV2.DefendUnionInfo> List {
      get { return list_; }
    }

    /// <summary>Field number for the "myScore" field.</summary>
    public const int MyScoreFieldNumber = 2;
    private int myScore_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MyScore {
      get { return myScore_; }
      set {
        myScore_ = value;
      }
    }

    /// <summary>Field number for the "spyScore" field.</summary>
    public const int SpyScoreFieldNumber = 3;
    private int spyScore_;
    /// <summary>
    ///间谍积分
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SpyScore {
      get { return spyScore_; }
      set {
        spyScore_ = value;
      }
    }

    /// <summary>Field number for the "endTime" field.</summary>
    public const int EndTimeFieldNumber = 4;
    private long endTime_;
    /// <summary>
    ///结束时间戳(秒)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long EndTime {
      get { return endTime_; }
      set {
        endTime_ = value;
      }
    }

    /// <summary>Field number for the "kingHpPer" field.</summary>
    public const int KingHpPerFieldNumber = 5;
    private int kingHpPer_;
    /// <summary>
    ///国王血量比例
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int KingHpPer {
      get { return kingHpPer_; }
      set {
        kingHpPer_ = value;
      }
    }

    /// <summary>Field number for the "unionId" field.</summary>
    public const int UnionIdFieldNumber = 6;
    private long unionId_;
    /// <summary>
    ///拥有国王守护权的帮会ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UnionId {
      get { return unionId_; }
      set {
        unionId_ = value;
      }
    }

    /// <summary>Field number for the "unionName" field.</summary>
    public const int UnionNameFieldNumber = 7;
    private string unionName_ = "";
    /// <summary>
    ///拥有国王守护权的帮会名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UnionName {
      get { return unionName_; }
      set {
        unionName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      list_.WriteTo(output, _repeated_list_codec);
      if (MyScore != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(MyScore);
      }
      if (SpyScore != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(SpyScore);
      }
      if (EndTime != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(EndTime);
      }
      if (KingHpPer != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(KingHpPer);
      }
      if (UnionId != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(UnionId);
      }
      if (UnionName.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(UnionName);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += list_.CalculateSize(_repeated_list_codec);
      if (MyScore != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MyScore);
      }
      if (SpyScore != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SpyScore);
      }
      if (EndTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(EndTime);
      }
      if (KingHpPer != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(KingHpPer);
      }
      if (UnionId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UnionId);
      }
      if (UnionName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UnionName);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            list_.AddEntriesFrom(input, _repeated_list_codec);
            break;
          }
          case 16: {
            MyScore = input.ReadInt32();
            break;
          }
          case 24: {
            SpyScore = input.ReadInt32();
            break;
          }
          case 32: {
            EndTime = input.ReadInt64();
            break;
          }
          case 40: {
            KingHpPer = input.ReadInt32();
            break;
          }
          case 48: {
            UnionId = input.ReadInt64();
            break;
          }
          case 58: {
            UnionName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///保卫国王帮派积分信息
  /// </summary>
  public sealed class DefendUnionInfo : pb::IMessage {
    private static readonly pb::MessageParser<DefendUnionInfo> _parser = new pb::MessageParser<DefendUnionInfo>(() => new DefendUnionInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DefendUnionInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "unionName" field.</summary>
    public const int UnionNameFieldNumber = 1;
    private string unionName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UnionName {
      get { return unionName_; }
      set {
        unionName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "unionScore" field.</summary>
    public const int UnionScoreFieldNumber = 2;
    private int unionScore_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnionScore {
      get { return unionScore_; }
      set {
        unionScore_ = value;
      }
    }

    /// <summary>Field number for the "totalScore" field.</summary>
    public const int TotalScoreFieldNumber = 3;
    private int totalScore_;
    /// <summary>
    ///总积分
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TotalScore {
      get { return totalScore_; }
      set {
        totalScore_ = value;
      }
    }

    /// <summary>Field number for the "unionId" field.</summary>
    public const int UnionIdFieldNumber = 4;
    private long unionId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UnionId {
      get { return unionId_; }
      set {
        unionId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UnionName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(UnionName);
      }
      if (UnionScore != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(UnionScore);
      }
      if (TotalScore != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(TotalScore);
      }
      if (UnionId != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(UnionId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UnionName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UnionName);
      }
      if (UnionScore != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnionScore);
      }
      if (TotalScore != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotalScore);
      }
      if (UnionId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UnionId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            UnionName = input.ReadString();
            break;
          }
          case 16: {
            UnionScore = input.ReadInt32();
            break;
          }
          case 24: {
            TotalScore = input.ReadInt32();
            break;
          }
          case 32: {
            UnionId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///保卫国王增加扣除积分包
  /// </summary>
  public sealed class ResDefendUpdateScore : pb::IMessage {
    private static readonly pb::MessageParser<ResDefendUpdateScore> _parser = new pb::MessageParser<ResDefendUpdateScore>(() => new ResDefendUpdateScore());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ResDefendUpdateScore> Parser { get { return _parser; } }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private int type_;
    /// <summary>
    ///1:杀刺客加积分2:打国王扣积分3:变成间谍打国王
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "score" field.</summary>
    public const int ScoreFieldNumber = 2;
    private int score_;
    /// <summary>
    ///(都为正)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Score {
      get { return score_; }
      set {
        score_ = value;
      }
    }

    /// <summary>Field number for the "kingId" field.</summary>
    public const int KingIdFieldNumber = 3;
    private long kingId_;
    /// <summary>
    ///国王Id，有的时候代表国王头上显示扣分
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long KingId {
      get { return kingId_; }
      set {
        kingId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Type);
      }
      if (Score != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Score);
      }
      if (KingId != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(KingId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (Score != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Score);
      }
      if (KingId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(KingId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Type = input.ReadInt32();
            break;
          }
          case 16: {
            Score = input.ReadInt32();
            break;
          }
          case 24: {
            KingId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///保卫排行
  /// </summary>
  public sealed class DefendRank : pb::IMessage {
    private static readonly pb::MessageParser<DefendRank> _parser = new pb::MessageParser<DefendRank>(() => new DefendRank());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DefendRank> Parser { get { return _parser; } }

    /// <summary>Field number for the "selfInfos" field.</summary>
    public const int SelfInfosFieldNumber = 1;
    private static readonly pb::FieldCodec<global::ActivityV2.DefendRankPlayerInfo> _repeated_selfInfos_codec
        = pb::FieldCodec.ForMessage(10, global::ActivityV2.DefendRankPlayerInfo.Parser);
    private readonly pbc::RepeatedField<global::ActivityV2.DefendRankPlayerInfo> selfInfos_ = new pbc::RepeatedField<global::ActivityV2.DefendRankPlayerInfo>();
    /// <summary>
    ///自己帮会
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ActivityV2.DefendRankPlayerInfo> SelfInfos {
      get { return selfInfos_; }
    }

    /// <summary>Field number for the "otherInfos" field.</summary>
    public const int OtherInfosFieldNumber = 2;
    private static readonly pb::FieldCodec<global::ActivityV2.DefendRankPlayerInfo> _repeated_otherInfos_codec
        = pb::FieldCodec.ForMessage(18, global::ActivityV2.DefendRankPlayerInfo.Parser);
    private readonly pbc::RepeatedField<global::ActivityV2.DefendRankPlayerInfo> otherInfos_ = new pbc::RepeatedField<global::ActivityV2.DefendRankPlayerInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ActivityV2.DefendRankPlayerInfo> OtherInfos {
      get { return otherInfos_; }
    }

    /// <summary>Field number for the "common" field.</summary>
    public const int CommonFieldNumber = 3;
    private global::ActivityV2.DefendRankCommon common_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ActivityV2.DefendRankCommon Common {
      get { return common_; }
      set {
        common_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      selfInfos_.WriteTo(output, _repeated_selfInfos_codec);
      otherInfos_.WriteTo(output, _repeated_otherInfos_codec);
      if (common_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Common);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += selfInfos_.CalculateSize(_repeated_selfInfos_codec);
      size += otherInfos_.CalculateSize(_repeated_otherInfos_codec);
      if (common_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Common);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            selfInfos_.AddEntriesFrom(input, _repeated_selfInfos_codec);
            break;
          }
          case 18: {
            otherInfos_.AddEntriesFrom(input, _repeated_otherInfos_codec);
            break;
          }
          case 26: {
            if (common_ == null) {
              common_ = new global::ActivityV2.DefendRankCommon();
            }
            input.ReadMessage(common_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///保卫排行玩家信息
  /// </summary>
  public sealed class DefendRankPlayerInfo : pb::IMessage {
    private static readonly pb::MessageParser<DefendRankPlayerInfo> _parser = new pb::MessageParser<DefendRankPlayerInfo>(() => new DefendRankPlayerInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DefendRankPlayerInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "rid" field.</summary>
    public const int RidFieldNumber = 1;
    private long rid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Rid {
      get { return rid_; }
      set {
        rid_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "career" field.</summary>
    public const int CareerFieldNumber = 3;
    private int career_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Career {
      get { return career_; }
      set {
        career_ = value;
      }
    }

    /// <summary>Field number for the "sex" field.</summary>
    public const int SexFieldNumber = 4;
    private int sex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Sex {
      get { return sex_; }
      set {
        sex_ = value;
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 5;
    private int level_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "killSmall" field.</summary>
    public const int KillSmallFieldNumber = 6;
    private int killSmall_;
    /// <summary>
    ///击杀小刺客
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int KillSmall {
      get { return killSmall_; }
      set {
        killSmall_ = value;
      }
    }

    /// <summary>Field number for the "killBig" field.</summary>
    public const int KillBigFieldNumber = 7;
    private int killBig_;
    /// <summary>
    ///击杀大刺客
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int KillBig {
      get { return killBig_; }
      set {
        killBig_ = value;
      }
    }

    /// <summary>Field number for the "killNum" field.</summary>
    public const int KillNumFieldNumber = 8;
    private int killNum_;
    /// <summary>
    ///杀敌
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int KillNum {
      get { return killNum_; }
      set {
        killNum_ = value;
      }
    }

    /// <summary>Field number for the "diedNum" field.</summary>
    public const int DiedNumFieldNumber = 9;
    private int diedNum_;
    /// <summary>
    ///阵亡
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DiedNum {
      get { return diedNum_; }
      set {
        diedNum_ = value;
      }
    }

    /// <summary>Field number for the "grade" field.</summary>
    public const int GradeFieldNumber = 10;
    private int grade_;
    /// <summary>
    ///评分
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Grade {
      get { return grade_; }
      set {
        grade_ = value;
      }
    }

    /// <summary>Field number for the "unionId" field.</summary>
    public const int UnionIdFieldNumber = 11;
    private long unionId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UnionId {
      get { return unionId_; }
      set {
        unionId_ = value;
      }
    }

    /// <summary>Field number for the "unionName" field.</summary>
    public const int UnionNameFieldNumber = 12;
    private string unionName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UnionName {
      get { return unionName_; }
      set {
        unionName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "titleType" field.</summary>
    public const int TitleTypeFieldNumber = 13;
    private int titleType_;
    /// <summary>
    ///称号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TitleType {
      get { return titleType_; }
      set {
        titleType_ = value;
      }
    }

    /// <summary>Field number for the "like" field.</summary>
    public const int LikeFieldNumber = 14;
    private static readonly pb::FieldCodec<long> _repeated_like_codec
        = pb::FieldCodec.ForInt64(114);
    private readonly pbc::RepeatedField<long> like_ = new pbc::RepeatedField<long>();
    /// <summary>
    ///点赞的人
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<long> Like {
      get { return like_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Rid != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Rid);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Career != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Career);
      }
      if (Sex != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Sex);
      }
      if (Level != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Level);
      }
      if (KillSmall != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(KillSmall);
      }
      if (KillBig != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(KillBig);
      }
      if (KillNum != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(KillNum);
      }
      if (DiedNum != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(DiedNum);
      }
      if (Grade != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(Grade);
      }
      if (UnionId != 0L) {
        output.WriteRawTag(88);
        output.WriteInt64(UnionId);
      }
      if (UnionName.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(UnionName);
      }
      if (TitleType != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(TitleType);
      }
      like_.WriteTo(output, _repeated_like_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Rid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Rid);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Career != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Career);
      }
      if (Sex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Sex);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (KillSmall != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(KillSmall);
      }
      if (KillBig != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(KillBig);
      }
      if (KillNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(KillNum);
      }
      if (DiedNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DiedNum);
      }
      if (Grade != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Grade);
      }
      if (UnionId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UnionId);
      }
      if (UnionName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UnionName);
      }
      if (TitleType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TitleType);
      }
      size += like_.CalculateSize(_repeated_like_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Rid = input.ReadInt64();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            Career = input.ReadInt32();
            break;
          }
          case 32: {
            Sex = input.ReadInt32();
            break;
          }
          case 40: {
            Level = input.ReadInt32();
            break;
          }
          case 48: {
            KillSmall = input.ReadInt32();
            break;
          }
          case 56: {
            KillBig = input.ReadInt32();
            break;
          }
          case 64: {
            KillNum = input.ReadInt32();
            break;
          }
          case 72: {
            DiedNum = input.ReadInt32();
            break;
          }
          case 80: {
            Grade = input.ReadInt32();
            break;
          }
          case 88: {
            UnionId = input.ReadInt64();
            break;
          }
          case 98: {
            UnionName = input.ReadString();
            break;
          }
          case 104: {
            TitleType = input.ReadInt32();
            break;
          }
          case 114:
          case 112: {
            like_.AddEntriesFrom(input, _repeated_like_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///保卫排行公共信息
  /// </summary>
  public sealed class DefendRankCommon : pb::IMessage {
    private static readonly pb::MessageParser<DefendRankCommon> _parser = new pb::MessageParser<DefendRankCommon>(() => new DefendRankCommon());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DefendRankCommon> Parser { get { return _parser; } }

    /// <summary>Field number for the "totalKillSmall" field.</summary>
    public const int TotalKillSmallFieldNumber = 1;
    private int totalKillSmall_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TotalKillSmall {
      get { return totalKillSmall_; }
      set {
        totalKillSmall_ = value;
      }
    }

    /// <summary>Field number for the "totalKillBig" field.</summary>
    public const int TotalKillBigFieldNumber = 2;
    private int totalKillBig_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TotalKillBig {
      get { return totalKillBig_; }
      set {
        totalKillBig_ = value;
      }
    }

    /// <summary>Field number for the "totalKill" field.</summary>
    public const int TotalKillFieldNumber = 3;
    private int totalKill_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TotalKill {
      get { return totalKill_; }
      set {
        totalKill_ = value;
      }
    }

    /// <summary>Field number for the "totalDied" field.</summary>
    public const int TotalDiedFieldNumber = 4;
    private int totalDied_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TotalDied {
      get { return totalDied_; }
      set {
        totalDied_ = value;
      }
    }

    /// <summary>Field number for the "rankSmall" field.</summary>
    public const int RankSmallFieldNumber = 5;
    private int rankSmall_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RankSmall {
      get { return rankSmall_; }
      set {
        rankSmall_ = value;
      }
    }

    /// <summary>Field number for the "rankBig" field.</summary>
    public const int RankBigFieldNumber = 6;
    private int rankBig_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RankBig {
      get { return rankBig_; }
      set {
        rankBig_ = value;
      }
    }

    /// <summary>Field number for the "rankKill" field.</summary>
    public const int RankKillFieldNumber = 7;
    private int rankKill_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RankKill {
      get { return rankKill_; }
      set {
        rankKill_ = value;
      }
    }

    /// <summary>Field number for the "rankDied" field.</summary>
    public const int RankDiedFieldNumber = 8;
    private int rankDied_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RankDied {
      get { return rankDied_; }
      set {
        rankDied_ = value;
      }
    }

    /// <summary>Field number for the "rankGrade" field.</summary>
    public const int RankGradeFieldNumber = 9;
    private int rankGrade_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RankGrade {
      get { return rankGrade_; }
      set {
        rankGrade_ = value;
      }
    }

    /// <summary>Field number for the "kingDied" field.</summary>
    public const int KingDiedFieldNumber = 10;
    private int kingDied_;
    /// <summary>
    ///1 国王死 0
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int KingDied {
      get { return kingDied_; }
      set {
        kingDied_ = value;
      }
    }

    /// <summary>Field number for the "lastFirstUnionName" field.</summary>
    public const int LastFirstUnionNameFieldNumber = 11;
    private string lastFirstUnionName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LastFirstUnionName {
      get { return lastFirstUnionName_; }
      set {
        lastFirstUnionName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TotalKillSmall != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(TotalKillSmall);
      }
      if (TotalKillBig != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(TotalKillBig);
      }
      if (TotalKill != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(TotalKill);
      }
      if (TotalDied != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(TotalDied);
      }
      if (RankSmall != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(RankSmall);
      }
      if (RankBig != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(RankBig);
      }
      if (RankKill != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(RankKill);
      }
      if (RankDied != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(RankDied);
      }
      if (RankGrade != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(RankGrade);
      }
      if (KingDied != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(KingDied);
      }
      if (LastFirstUnionName.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(LastFirstUnionName);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TotalKillSmall != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotalKillSmall);
      }
      if (TotalKillBig != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotalKillBig);
      }
      if (TotalKill != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotalKill);
      }
      if (TotalDied != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotalDied);
      }
      if (RankSmall != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RankSmall);
      }
      if (RankBig != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RankBig);
      }
      if (RankKill != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RankKill);
      }
      if (RankDied != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RankDied);
      }
      if (RankGrade != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RankGrade);
      }
      if (KingDied != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(KingDied);
      }
      if (LastFirstUnionName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LastFirstUnionName);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TotalKillSmall = input.ReadInt32();
            break;
          }
          case 16: {
            TotalKillBig = input.ReadInt32();
            break;
          }
          case 24: {
            TotalKill = input.ReadInt32();
            break;
          }
          case 32: {
            TotalDied = input.ReadInt32();
            break;
          }
          case 40: {
            RankSmall = input.ReadInt32();
            break;
          }
          case 48: {
            RankBig = input.ReadInt32();
            break;
          }
          case 56: {
            RankKill = input.ReadInt32();
            break;
          }
          case 64: {
            RankDied = input.ReadInt32();
            break;
          }
          case 72: {
            RankGrade = input.ReadInt32();
            break;
          }
          case 80: {
            KingDied = input.ReadInt32();
            break;
          }
          case 90: {
            LastFirstUnionName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///活动结束消息
  /// </summary>
  public sealed class ResDefendOver : pb::IMessage {
    private static readonly pb::MessageParser<ResDefendOver> _parser = new pb::MessageParser<ResDefendOver>(() => new ResDefendOver());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ResDefendOver> Parser { get { return _parser; } }

    /// <summary>Field number for the "rank" field.</summary>
    public const int RankFieldNumber = 1;
    private global::ActivityV2.DefendRank rank_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ActivityV2.DefendRank Rank {
      get { return rank_; }
      set {
        rank_ = value;
      }
    }

    /// <summary>Field number for the "showTime" field.</summary>
    public const int ShowTimeFieldNumber = 2;
    private long showTime_;
    /// <summary>
    ///展示时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ShowTime {
      get { return showTime_; }
      set {
        showTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (rank_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Rank);
      }
      if (ShowTime != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(ShowTime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (rank_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Rank);
      }
      if (ShowTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ShowTime);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (rank_ == null) {
              rank_ = new global::ActivityV2.DefendRank();
            }
            input.ReadMessage(rank_);
            break;
          }
          case 16: {
            ShowTime = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///返回上次排行数据
  /// </summary>
  public sealed class ResDefendLastRank : pb::IMessage {
    private static readonly pb::MessageParser<ResDefendLastRank> _parser = new pb::MessageParser<ResDefendLastRank>(() => new ResDefendLastRank());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ResDefendLastRank> Parser { get { return _parser; } }

    /// <summary>Field number for the "rank" field.</summary>
    public const int RankFieldNumber = 1;
    private global::ActivityV2.DefendRank rank_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ActivityV2.DefendRank Rank {
      get { return rank_; }
      set {
        rank_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (rank_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Rank);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (rank_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Rank);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (rank_ == null) {
              rank_ = new global::ActivityV2.DefendRank();
            }
            input.ReadMessage(rank_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 日常活动状态改变
  /// </summary>
  public sealed class ResDailyActivityStatusChanged : pb::IMessage {
    private static readonly pb::MessageParser<ResDailyActivityStatusChanged> _parser = new pb::MessageParser<ResDailyActivityStatusChanged>(() => new ResDailyActivityStatusChanged());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ResDailyActivityStatusChanged> Parser { get { return _parser; } }

    /// <summary>Field number for the "activityType" field.</summary>
    public const int ActivityTypeFieldNumber = 1;
    private int activityType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ActivityType {
      get { return activityType_; }
      set {
        activityType_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 2;
    private bool status_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ActivityType != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ActivityType);
      }
      if (Status != false) {
        output.WriteRawTag(16);
        output.WriteBool(Status);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ActivityType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ActivityType);
      }
      if (Status != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ActivityType = input.ReadInt32();
            break;
          }
          case 16: {
            Status = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 所有玩家可以领取的任务
  /// </summary>
  public sealed class ResAllActivityCommonStatus : pb::IMessage {
    private static readonly pb::MessageParser<ResAllActivityCommonStatus> _parser = new pb::MessageParser<ResAllActivityCommonStatus>(() => new ResAllActivityCommonStatus());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ResAllActivityCommonStatus> Parser { get { return _parser; } }

    /// <summary>Field number for the "statusList" field.</summary>
    public const int StatusListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::ActivityV2.ActivityCommonStatus> _repeated_statusList_codec
        = pb::FieldCodec.ForMessage(10, global::ActivityV2.ActivityCommonStatus.Parser);
    private readonly pbc::RepeatedField<global::ActivityV2.ActivityCommonStatus> statusList_ = new pbc::RepeatedField<global::ActivityV2.ActivityCommonStatus>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ActivityV2.ActivityCommonStatus> StatusList {
      get { return statusList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      statusList_.WriteTo(output, _repeated_statusList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += statusList_.CalculateSize(_repeated_statusList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            statusList_.AddEntriesFrom(input, _repeated_statusList_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 活动状态改变
  /// </summary>
  public sealed class ActivityCommonStatus : pb::IMessage {
    private static readonly pb::MessageParser<ActivityCommonStatus> _parser = new pb::MessageParser<ActivityCommonStatus>(() => new ActivityCommonStatus());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ActivityCommonStatus> Parser { get { return _parser; } }

    /// <summary>Field number for the "activityId" field.</summary>
    public const int ActivityIdFieldNumber = 1;
    private int activityId_;
    /// <summary>
    ///活动Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ActivityId {
      get { return activityId_; }
      set {
        activityId_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 2;
    private int status_;
    /// <summary>
    ///0:不可领 1：可领，2：已领
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ActivityId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ActivityId);
      }
      if (Status != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Status);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ActivityId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ActivityId);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Status);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ActivityId = input.ReadInt32();
            break;
          }
          case 16: {
            Status = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///boss积分奖励状况
  /// </summary>
  public sealed class BossScoreRewards : pb::IMessage {
    private static readonly pb::MessageParser<BossScoreRewards> _parser = new pb::MessageParser<BossScoreRewards>(() => new BossScoreRewards());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BossScoreRewards> Parser { get { return _parser; } }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 2;
    private int state_;
    /// <summary>
    ///状态 0.未完成 1.可领取 2.已领取
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    /// <summary>Field number for the "killCount" field.</summary>
    public const int KillCountFieldNumber = 3;
    private int killCount_;
    /// <summary>
    ///击杀数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int KillCount {
      get { return killCount_; }
      set {
        killCount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (State != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(State);
      }
      if (KillCount != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(KillCount);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (State != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(State);
      }
      if (KillCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(KillCount);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            State = input.ReadInt32();
            break;
          }
          case 24: {
            KillCount = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///boss积分相应
  /// </summary>
  public sealed class BossScoreRes : pb::IMessage {
    private static readonly pb::MessageParser<BossScoreRes> _parser = new pb::MessageParser<BossScoreRes>(() => new BossScoreRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BossScoreRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "score" field.</summary>
    public const int ScoreFieldNumber = 1;
    private int score_;
    /// <summary>
    ///积分数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Score {
      get { return score_; }
      set {
        score_ = value;
      }
    }

    /// <summary>Field number for the "day" field.</summary>
    public const int DayFieldNumber = 2;
    private int day_;
    /// <summary>
    ///剩余天数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Day {
      get { return day_; }
      set {
        day_ = value;
      }
    }

    /// <summary>Field number for the "rewards" field.</summary>
    public const int RewardsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::ActivityV2.BossScoreRewards> _repeated_rewards_codec
        = pb::FieldCodec.ForMessage(26, global::ActivityV2.BossScoreRewards.Parser);
    private readonly pbc::RepeatedField<global::ActivityV2.BossScoreRewards> rewards_ = new pbc::RepeatedField<global::ActivityV2.BossScoreRewards>();
    /// <summary>
    ///奖励
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ActivityV2.BossScoreRewards> Rewards {
      get { return rewards_; }
    }

    /// <summary>Field number for the "isCard" field.</summary>
    public const int IsCardFieldNumber = 4;
    private bool isCard_;
    /// <summary>
    ///是否存在猎魔人
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsCard {
      get { return isCard_; }
      set {
        isCard_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Score != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Score);
      }
      if (Day != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Day);
      }
      rewards_.WriteTo(output, _repeated_rewards_codec);
      if (IsCard != false) {
        output.WriteRawTag(32);
        output.WriteBool(IsCard);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Score != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Score);
      }
      if (Day != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Day);
      }
      size += rewards_.CalculateSize(_repeated_rewards_codec);
      if (IsCard != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Score = input.ReadInt32();
            break;
          }
          case 16: {
            Day = input.ReadInt32();
            break;
          }
          case 26: {
            rewards_.AddEntriesFrom(input, _repeated_rewards_codec);
            break;
          }
          case 32: {
            IsCard = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///领取boss积分奖励
  /// </summary>
  public sealed class GetBossScoreReward : pb::IMessage {
    private static readonly pb::MessageParser<GetBossScoreReward> _parser = new pb::MessageParser<GetBossScoreReward>(() => new GetBossScoreReward());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetBossScoreReward> Parser { get { return _parser; } }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///领取到的物品提示面板
  /// </summary>
  public sealed class TheActivityHasRewarded : pb::IMessage {
    private static readonly pb::MessageParser<TheActivityHasRewarded> _parser = new pb::MessageParser<TheActivityHasRewarded>(() => new TheActivityHasRewarded());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TheActivityHasRewarded> Parser { get { return _parser; } }

    /// <summary>Field number for the "rewards" field.</summary>
    public const int RewardsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::ActivityV2.ActivityRewards> _repeated_rewards_codec
        = pb::FieldCodec.ForMessage(10, global::ActivityV2.ActivityRewards.Parser);
    private readonly pbc::RepeatedField<global::ActivityV2.ActivityRewards> rewards_ = new pbc::RepeatedField<global::ActivityV2.ActivityRewards>();
    /// <summary>
    ///能领到的奖励
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ActivityV2.ActivityRewards> Rewards {
      get { return rewards_; }
    }

    /// <summary>Field number for the "fromModule" field.</summary>
    public const int FromModuleFieldNumber = 2;
    private int fromModule_;
    /// <summary>
    ///  6狼烟梦境.  0是通用的
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FromModule {
      get { return fromModule_; }
      set {
        fromModule_ = value;
      }
    }

    /// <summary>Field number for the "success" field.</summary>
    public const int SuccessFieldNumber = 3;
    private bool success_;
    /// <summary>
    /// 默认都是成功.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Success {
      get { return success_; }
      set {
        success_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      rewards_.WriteTo(output, _repeated_rewards_codec);
      if (FromModule != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(FromModule);
      }
      if (Success != false) {
        output.WriteRawTag(24);
        output.WriteBool(Success);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += rewards_.CalculateSize(_repeated_rewards_codec);
      if (FromModule != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FromModule);
      }
      if (Success != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            rewards_.AddEntriesFrom(input, _repeated_rewards_codec);
            break;
          }
          case 16: {
            FromModule = input.ReadInt32();
            break;
          }
          case 24: {
            Success = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///领取的物品
  /// </summary>
  public sealed class ActivityRewards : pb::IMessage {
    private static readonly pb::MessageParser<ActivityRewards> _parser = new pb::MessageParser<ActivityRewards>(() => new ActivityRewards());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ActivityRewards> Parser { get { return _parser; } }

    /// <summary>Field number for the "itemId" field.</summary>
    public const int ItemIdFieldNumber = 1;
    private int itemId_;
    /// <summary>
    ///物品的itemId
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ItemId {
      get { return itemId_; }
      set {
        itemId_ = value;
      }
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 2;
    private int count_;
    /// <summary>
    ///获取到的数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ItemId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ItemId);
      }
      if (Count != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Count);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ItemId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ItemId);
      }
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Count);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ItemId = input.ReadInt32();
            break;
          }
          case 16: {
            Count = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///先全服再个人开红包
  /// </summary>
  public sealed class ServerRoleReward : pb::IMessage {
    private static readonly pb::MessageParser<ServerRoleReward> _parser = new pb::MessageParser<ServerRoleReward>(() => new ServerRoleReward());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ServerRoleReward> Parser { get { return _parser; } }

    /// <summary>Field number for the "randomRewards" field.</summary>
    public const int RandomRewardsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::ActivityV2.ItemCountInfo> _repeated_randomRewards_codec
        = pb::FieldCodec.ForMessage(10, global::ActivityV2.ItemCountInfo.Parser);
    private readonly pbc::RepeatedField<global::ActivityV2.ItemCountInfo> randomRewards_ = new pbc::RepeatedField<global::ActivityV2.ItemCountInfo>();
    /// <summary>
    ///随机奖励
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ActivityV2.ItemCountInfo> RandomRewards {
      get { return randomRewards_; }
    }

    /// <summary>Field number for the "rewardHistorys" field.</summary>
    public const int RewardHistorysFieldNumber = 3;
    private static readonly pb::FieldCodec<global::ActivityV2.ServerRoleRed> _repeated_rewardHistorys_codec
        = pb::FieldCodec.ForMessage(26, global::ActivityV2.ServerRoleRed.Parser);
    private readonly pbc::RepeatedField<global::ActivityV2.ServerRoleRed> rewardHistorys_ = new pbc::RepeatedField<global::ActivityV2.ServerRoleRed>();
    /// <summary>
    ///ServerRoleFinish finishRole = 2;  //完成人信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ActivityV2.ServerRoleRed> RewardHistorys {
      get { return rewardHistorys_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      randomRewards_.WriteTo(output, _repeated_randomRewards_codec);
      rewardHistorys_.WriteTo(output, _repeated_rewardHistorys_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += randomRewards_.CalculateSize(_repeated_randomRewards_codec);
      size += rewardHistorys_.CalculateSize(_repeated_rewardHistorys_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            randomRewards_.AddEntriesFrom(input, _repeated_randomRewards_codec);
            break;
          }
          case 26: {
            rewardHistorys_.AddEntriesFrom(input, _repeated_rewardHistorys_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///先全服后个人的完成人信息
  /// </summary>
  public sealed class ServerRoleFinish : pb::IMessage {
    private static readonly pb::MessageParser<ServerRoleFinish> _parser = new pb::MessageParser<ServerRoleFinish>(() => new ServerRoleFinish());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ServerRoleFinish> Parser { get { return _parser; } }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 1;
    private long roleId_;
    /// <summary>
    ///角色id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    /// <summary>
    ///姓名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "sex" field.</summary>
    public const int SexFieldNumber = 3;
    private int sex_;
    /// <summary>
    ///性别
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Sex {
      get { return sex_; }
      set {
        sex_ = value;
      }
    }

    /// <summary>Field number for the "carrer" field.</summary>
    public const int CarrerFieldNumber = 4;
    private int carrer_;
    /// <summary>
    ///职业
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Carrer {
      get { return carrer_; }
      set {
        carrer_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(RoleId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Sex != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Sex);
      }
      if (Carrer != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Carrer);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(RoleId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Sex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Sex);
      }
      if (Carrer != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Carrer);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoleId = input.ReadInt64();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            Sex = input.ReadInt32();
            break;
          }
          case 32: {
            Carrer = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///先全服后个人红包信息
  /// </summary>
  public sealed class ServerRoleRed : pb::IMessage {
    private static readonly pb::MessageParser<ServerRoleRed> _parser = new pb::MessageParser<ServerRoleRed>(() => new ServerRoleRed());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ServerRoleRed> Parser { get { return _parser; } }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 1;
    private long roleId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "rewards" field.</summary>
    public const int RewardsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::ActivityV2.ItemCountInfo> _repeated_rewards_codec
        = pb::FieldCodec.ForMessage(26, global::ActivityV2.ItemCountInfo.Parser);
    private readonly pbc::RepeatedField<global::ActivityV2.ItemCountInfo> rewards_ = new pbc::RepeatedField<global::ActivityV2.ItemCountInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ActivityV2.ItemCountInfo> Rewards {
      get { return rewards_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(RoleId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      rewards_.WriteTo(output, _repeated_rewards_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(RoleId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      size += rewards_.CalculateSize(_repeated_rewards_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoleId = input.ReadInt64();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            rewards_.AddEntriesFrom(input, _repeated_rewards_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///物品和个数
  /// </summary>
  public sealed class ItemCountInfo : pb::IMessage {
    private static readonly pb::MessageParser<ItemCountInfo> _parser = new pb::MessageParser<ItemCountInfo>(() => new ItemCountInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ItemCountInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "itemId" field.</summary>
    public const int ItemIdFieldNumber = 1;
    private int itemId_;
    /// <summary>
    ///物品Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ItemId {
      get { return itemId_; }
      set {
        itemId_ = value;
      }
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 2;
    private int count_;
    /// <summary>
    ///物品个数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ItemId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ItemId);
      }
      if (Count != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Count);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ItemId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ItemId);
      }
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Count);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ItemId = input.ReadInt32();
            break;
          }
          case 16: {
            Count = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class ResDefendRankList : pb::IMessage {
    private static readonly pb::MessageParser<ResDefendRankList> _parser = new pb::MessageParser<ResDefendRankList>(() => new ResDefendRankList());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ResDefendRankList> Parser { get { return _parser; } }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 1;
    private static readonly pb::FieldCodec<long> _repeated_time_codec
        = pb::FieldCodec.ForInt64(10);
    private readonly pbc::RepeatedField<long> time_ = new pbc::RepeatedField<long>();
    /// <summary>
    ///时间戳
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<long> Time {
      get { return time_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      time_.WriteTo(output, _repeated_time_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += time_.CalculateSize(_repeated_time_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            time_.AddEntriesFrom(input, _repeated_time_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class ReqDefendLastRank : pb::IMessage {
    private static readonly pb::MessageParser<ReqDefendLastRank> _parser = new pb::MessageParser<ReqDefendLastRank>(() => new ReqDefendLastRank());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqDefendLastRank> Parser { get { return _parser; } }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 1;
    private long time_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Time != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Time);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Time != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Time);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Time = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///玩家上线发送今日已结束的活动type（每日0点清空）
  /// </summary>
  public sealed class ResTodayClosedActivities : pb::IMessage {
    private static readonly pb::MessageParser<ResTodayClosedActivities> _parser = new pb::MessageParser<ResTodayClosedActivities>(() => new ResTodayClosedActivities());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ResTodayClosedActivities> Parser { get { return _parser; } }

    /// <summary>Field number for the "activityType" field.</summary>
    public const int ActivityTypeFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_activityType_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> activityType_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> ActivityType {
      get { return activityType_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      activityType_.WriteTo(output, _repeated_activityType_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += activityType_.CalculateSize(_repeated_activityType_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            activityType_.AddEntriesFrom(input, _repeated_activityType_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class ResBlackIronCost : pb::IMessage {
    private static readonly pb::MessageParser<ResBlackIronCost> _parser = new pb::MessageParser<ResBlackIronCost>(() => new ResBlackIronCost());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ResBlackIronCost> Parser { get { return _parser; } }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 1;
    private int value_;
    /// <summary>
    ///活动期间黑铁矿消耗
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Value != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Value);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Value != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Value);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Value = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///需要打开图标的历法活动
  /// </summary>
  public sealed class ResTodayOpenActivities : pb::IMessage {
    private static readonly pb::MessageParser<ResTodayOpenActivities> _parser = new pb::MessageParser<ResTodayOpenActivities>(() => new ResTodayOpenActivities());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ResTodayOpenActivities> Parser { get { return _parser; } }

    /// <summary>Field number for the "activityType" field.</summary>
    public const int ActivityTypeFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_activityType_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> activityType_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> ActivityType {
      get { return activityType_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      activityType_.WriteTo(output, _repeated_activityType_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += activityType_.CalculateSize(_repeated_activityType_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            activityType_.AddEntriesFrom(input, _repeated_activityType_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class ReqZhuanpan : pb::IMessage {
    private static readonly pb::MessageParser<ReqZhuanpan> _parser = new pb::MessageParser<ReqZhuanpan>(() => new ReqZhuanpan());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqZhuanpan> Parser { get { return _parser; } }

    /// <summary>Field number for the "itemId" field.</summary>
    public const int ItemIdFieldNumber = 1;
    private int itemId_;
    /// <summary>
    /// 消耗材料的 itemId
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ItemId {
      get { return itemId_; }
      set {
        itemId_ = value;
      }
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 2;
    private int count_;
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ItemId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ItemId);
      }
      if (Count != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Count);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ItemId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ItemId);
      }
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Count);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ItemId = input.ReadInt32();
            break;
          }
          case 16: {
            Count = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class ResZhuanpanResult : pb::IMessage {
    private static readonly pb::MessageParser<ResZhuanpanResult> _parser = new pb::MessageParser<ResZhuanpanResult>(() => new ResZhuanpanResult());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ResZhuanpanResult> Parser { get { return _parser; } }

    /// <summary>Field number for the "cfgIds" field.</summary>
    public const int CfgIdsFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_cfgIds_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> cfgIds_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 转盘表的 id 列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> CfgIds {
      get { return cfgIds_; }
    }

    /// <summary>Field number for the "zhuanpanLuck" field.</summary>
    public const int ZhuanpanLuckFieldNumber = 2;
    private int zhuanpanLuck_;
    /// <summary>
    /// 当前幸运
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ZhuanpanLuck {
      get { return zhuanpanLuck_; }
      set {
        zhuanpanLuck_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      cfgIds_.WriteTo(output, _repeated_cfgIds_codec);
      if (ZhuanpanLuck != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ZhuanpanLuck);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += cfgIds_.CalculateSize(_repeated_cfgIds_codec);
      if (ZhuanpanLuck != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ZhuanpanLuck);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            cfgIds_.AddEntriesFrom(input, _repeated_cfgIds_codec);
            break;
          }
          case 16: {
            ZhuanpanLuck = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class ZhuanpanHistory : pb::IMessage {
    private static readonly pb::MessageParser<ZhuanpanHistory> _parser = new pb::MessageParser<ZhuanpanHistory>(() => new ZhuanpanHistory());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ZhuanpanHistory> Parser { get { return _parser; } }

    /// <summary>Field number for the "itemId" field.</summary>
    public const int ItemIdFieldNumber = 1;
    private int itemId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ItemId {
      get { return itemId_; }
      set {
        itemId_ = value;
      }
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 2;
    private int count_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 3;
    private long time_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ItemId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ItemId);
      }
      if (Count != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Count);
      }
      if (Time != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Time);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ItemId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ItemId);
      }
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Count);
      }
      if (Time != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Time);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ItemId = input.ReadInt32();
            break;
          }
          case 16: {
            Count = input.ReadInt32();
            break;
          }
          case 24: {
            Time = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed class ResZhuanpanHistories : pb::IMessage {
    private static readonly pb::MessageParser<ResZhuanpanHistories> _parser = new pb::MessageParser<ResZhuanpanHistories>(() => new ResZhuanpanHistories());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ResZhuanpanHistories> Parser { get { return _parser; } }

    /// <summary>Field number for the "zhuanpanLuck" field.</summary>
    public const int ZhuanpanLuckFieldNumber = 1;
    private int zhuanpanLuck_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ZhuanpanLuck {
      get { return zhuanpanLuck_; }
      set {
        zhuanpanLuck_ = value;
      }
    }

    /// <summary>Field number for the "histories" field.</summary>
    public const int HistoriesFieldNumber = 2;
    private static readonly pb::FieldCodec<global::ActivityV2.ZhuanpanHistory> _repeated_histories_codec
        = pb::FieldCodec.ForMessage(18, global::ActivityV2.ZhuanpanHistory.Parser);
    private readonly pbc::RepeatedField<global::ActivityV2.ZhuanpanHistory> histories_ = new pbc::RepeatedField<global::ActivityV2.ZhuanpanHistory>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ActivityV2.ZhuanpanHistory> Histories {
      get { return histories_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ZhuanpanLuck != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ZhuanpanLuck);
      }
      histories_.WriteTo(output, _repeated_histories_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ZhuanpanLuck != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ZhuanpanLuck);
      }
      size += histories_.CalculateSize(_repeated_histories_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ZhuanpanLuck = input.ReadInt32();
            break;
          }
          case 18: {
            histories_.AddEntriesFrom(input, _repeated_histories_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///返回七日狂欢信息
  /// </summary>
  public sealed class ResHappySevenDayActivityDayInfo : pb::IMessage {
    private static readonly pb::MessageParser<ResHappySevenDayActivityDayInfo> _parser = new pb::MessageParser<ResHappySevenDayActivityDayInfo>(() => new ResHappySevenDayActivityDayInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ResHappySevenDayActivityDayInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "completeTotalCount" field.</summary>
    public const int CompleteTotalCountFieldNumber = 1;
    private int completeTotalCount_;
    /// <summary>
    ///任务完成总个数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CompleteTotalCount {
      get { return completeTotalCount_; }
      set {
        completeTotalCount_ = value;
      }
    }

    /// <summary>Field number for the "reward" field.</summary>
    public const int RewardFieldNumber = 2;
    private long reward_;
    /// <summary>
    ///宝箱领取状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Reward {
      get { return reward_; }
      set {
        reward_ = value;
      }
    }

    /// <summary>Field number for the "totalInfo" field.</summary>
    public const int TotalInfoFieldNumber = 3;
    private static readonly pb::FieldCodec<global::ActivityV2.TotalInfo> _repeated_totalInfo_codec
        = pb::FieldCodec.ForMessage(26, global::ActivityV2.TotalInfo.Parser);
    private readonly pbc::RepeatedField<global::ActivityV2.TotalInfo> totalInfo_ = new pbc::RepeatedField<global::ActivityV2.TotalInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ActivityV2.TotalInfo> TotalInfo {
      get { return totalInfo_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CompleteTotalCount != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CompleteTotalCount);
      }
      if (Reward != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Reward);
      }
      totalInfo_.WriteTo(output, _repeated_totalInfo_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CompleteTotalCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CompleteTotalCount);
      }
      if (Reward != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Reward);
      }
      size += totalInfo_.CalculateSize(_repeated_totalInfo_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            CompleteTotalCount = input.ReadInt32();
            break;
          }
          case 16: {
            Reward = input.ReadInt64();
            break;
          }
          case 26: {
            totalInfo_.AddEntriesFrom(input, _repeated_totalInfo_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class TotalInfo : pb::IMessage {
    private static readonly pb::MessageParser<TotalInfo> _parser = new pb::MessageParser<TotalInfo>(() => new TotalInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TotalInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "day" field.</summary>
    public const int DayFieldNumber = 1;
    private int day_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Day {
      get { return day_; }
      set {
        day_ = value;
      }
    }

    /// <summary>Field number for the "detailInfoOfDay" field.</summary>
    public const int DetailInfoOfDayFieldNumber = 2;
    private static readonly pb::FieldCodec<global::ActivityV2.DetailInfoOfDay> _repeated_detailInfoOfDay_codec
        = pb::FieldCodec.ForMessage(18, global::ActivityV2.DetailInfoOfDay.Parser);
    private readonly pbc::RepeatedField<global::ActivityV2.DetailInfoOfDay> detailInfoOfDay_ = new pbc::RepeatedField<global::ActivityV2.DetailInfoOfDay>();
    /// <summary>
    ///每天任务信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ActivityV2.DetailInfoOfDay> DetailInfoOfDay {
      get { return detailInfoOfDay_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Day != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Day);
      }
      detailInfoOfDay_.WriteTo(output, _repeated_detailInfoOfDay_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Day != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Day);
      }
      size += detailInfoOfDay_.CalculateSize(_repeated_detailInfoOfDay_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Day = input.ReadInt32();
            break;
          }
          case 18: {
            detailInfoOfDay_.AddEntriesFrom(input, _repeated_detailInfoOfDay_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///七日狂欢任务详情
  /// </summary>
  public sealed class DetailInfoOfDay : pb::IMessage {
    private static readonly pb::MessageParser<DetailInfoOfDay> _parser = new pb::MessageParser<DetailInfoOfDay>(() => new DetailInfoOfDay());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DetailInfoOfDay> Parser { get { return _parser; } }

    /// <summary>Field number for the "activityId" field.</summary>
    public const int ActivityIdFieldNumber = 1;
    private int activityId_;
    /// <summary>
    ///活动id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ActivityId {
      get { return activityId_; }
      set {
        activityId_ = value;
      }
    }

    /// <summary>Field number for the "group" field.</summary>
    public const int GroupFieldNumber = 2;
    private int group_;
    /// <summary>
    ///组别(每日/福利)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Group {
      get { return group_; }
      set {
        group_ = value;
      }
    }

    /// <summary>Field number for the "curCount" field.</summary>
    public const int CurCountFieldNumber = 3;
    private int curCount_;
    /// <summary>
    ///当前数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurCount {
      get { return curCount_; }
      set {
        curCount_ = value;
      }
    }

    /// <summary>Field number for the "maxCount" field.</summary>
    public const int MaxCountFieldNumber = 4;
    private int maxCount_;
    /// <summary>
    ///需要完成最大数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxCount {
      get { return maxCount_; }
      set {
        maxCount_ = value;
      }
    }

    /// <summary>Field number for the "rewardState" field.</summary>
    public const int RewardStateFieldNumber = 5;
    private int rewardState_;
    /// <summary>
    ///领取状态 0 不可领 1 可领取 2 已领取
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RewardState {
      get { return rewardState_; }
      set {
        rewardState_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ActivityId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ActivityId);
      }
      if (Group != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Group);
      }
      if (CurCount != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(CurCount);
      }
      if (MaxCount != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(MaxCount);
      }
      if (RewardState != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(RewardState);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ActivityId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ActivityId);
      }
      if (Group != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Group);
      }
      if (CurCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurCount);
      }
      if (MaxCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxCount);
      }
      if (RewardState != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RewardState);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ActivityId = input.ReadInt32();
            break;
          }
          case 16: {
            Group = input.ReadInt32();
            break;
          }
          case 24: {
            CurCount = input.ReadInt32();
            break;
          }
          case 32: {
            MaxCount = input.ReadInt32();
            break;
          }
          case 40: {
            RewardState = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求领取七日狂欢任务奖励
  /// </summary>
  public sealed class ReqDrawHappySevenDayActivityDayReward : pb::IMessage {
    private static readonly pb::MessageParser<ReqDrawHappySevenDayActivityDayReward> _parser = new pb::MessageParser<ReqDrawHappySevenDayActivityDayReward>(() => new ReqDrawHappySevenDayActivityDayReward());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqDrawHappySevenDayActivityDayReward> Parser { get { return _parser; } }

    /// <summary>Field number for the "activityId" field.</summary>
    public const int ActivityIdFieldNumber = 1;
    private int activityId_;
    /// <summary>
    ///任务id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ActivityId {
      get { return activityId_; }
      set {
        activityId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ActivityId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ActivityId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ActivityId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ActivityId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ActivityId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求领取七日狂欢宝箱奖励
  /// </summary>
  public sealed class ReqDrawHappySevenDayBoxRewrad : pb::IMessage {
    private static readonly pb::MessageParser<ReqDrawHappySevenDayBoxRewrad> _parser = new pb::MessageParser<ReqDrawHappySevenDayBoxRewrad>(() => new ReqDrawHappySevenDayBoxRewrad());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqDrawHappySevenDayBoxRewrad> Parser { get { return _parser; } }

    /// <summary>Field number for the "boxId" field.</summary>
    public const int BoxIdFieldNumber = 1;
    private int boxId_;
    /// <summary>
    ///宝箱id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BoxId {
      get { return boxId_; }
      set {
        boxId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BoxId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(BoxId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BoxId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BoxId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            BoxId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求领取每日体力补给
  /// </summary>
  public sealed class ReqGetEnergySupplyReward : pb::IMessage {
    private static readonly pb::MessageParser<ReqGetEnergySupplyReward> _parser = new pb::MessageParser<ReqGetEnergySupplyReward>(() => new ReqGetEnergySupplyReward());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqGetEnergySupplyReward> Parser { get { return _parser; } }

    /// <summary>Field number for the "activityId" field.</summary>
    public const int ActivityIdFieldNumber = 1;
    private int activityId_;
    /// <summary>
    ///活动id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ActivityId {
      get { return activityId_; }
      set {
        activityId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ActivityId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ActivityId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ActivityId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ActivityId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ActivityId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///是否能够领取每日补给结果
  /// </summary>
  public sealed class ResIsGetReward : pb::IMessage {
    private static readonly pb::MessageParser<ResIsGetReward> _parser = new pb::MessageParser<ResIsGetReward>(() => new ResIsGetReward());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ResIsGetReward> Parser { get { return _parser; } }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 1;
    private int result_;
    /// <summary>
    ///0：未开启  1：可领取  2：已领取
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Result != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Result);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Result != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Result = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///开始聚宝
  /// </summary>
  public sealed class ReqStartGain : pb::IMessage {
    private static readonly pb::MessageParser<ReqStartGain> _parser = new pb::MessageParser<ReqStartGain>(() => new ReqStartGain());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqStartGain> Parser { get { return _parser; } }

    /// <summary>Field number for the "itemId" field.</summary>
    public const int ItemIdFieldNumber = 1;
    private int itemId_;
    /// <summary>
    ///物品id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ItemId {
      get { return itemId_; }
      set {
        itemId_ = value;
      }
    }

    /// <summary>Field number for the "costCount" field.</summary>
    public const int CostCountFieldNumber = 2;
    private long costCount_;
    /// <summary>
    ///消耗数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CostCount {
      get { return costCount_; }
      set {
        costCount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ItemId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ItemId);
      }
      if (CostCount != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(CostCount);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ItemId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ItemId);
      }
      if (CostCount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CostCount);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ItemId = input.ReadInt32();
            break;
          }
          case 16: {
            CostCount = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///返回聚宝盆信息
  /// </summary>
  public sealed class ResAgateInfo : pb::IMessage {
    private static readonly pb::MessageParser<ResAgateInfo> _parser = new pb::MessageParser<ResAgateInfo>(() => new ResAgateInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ResAgateInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "itemId" field.</summary>
    public const int ItemIdFieldNumber = 1;
    private int itemId_;
    /// <summary>
    ///物品id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ItemId {
      get { return itemId_; }
      set {
        itemId_ = value;
      }
    }

    /// <summary>Field number for the "gainCount" field.</summary>
    public const int GainCountFieldNumber = 2;
    private long gainCount_;
    /// <summary>
    ///获得数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long GainCount {
      get { return gainCount_; }
      set {
        gainCount_ = value;
      }
    }

    /// <summary>Field number for the "endTime" field.</summary>
    public const int EndTimeFieldNumber = 3;
    private long endTime_;
    /// <summary>
    ///结束时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long EndTime {
      get { return endTime_; }
      set {
        endTime_ = value;
      }
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 4;
    private int state_;
    /// <summary>
    ///状态 0：未开始 1：正在聚宝 2：待领取
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    /// <summary>Field number for the "totalCount" field.</summary>
    public const int TotalCountFieldNumber = 5;
    private long totalCount_;
    /// <summary>
    ///聚宝盆物品总数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TotalCount {
      get { return totalCount_; }
      set {
        totalCount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ItemId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ItemId);
      }
      if (GainCount != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(GainCount);
      }
      if (EndTime != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(EndTime);
      }
      if (State != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(State);
      }
      if (TotalCount != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(TotalCount);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ItemId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ItemId);
      }
      if (GainCount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(GainCount);
      }
      if (EndTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(EndTime);
      }
      if (State != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(State);
      }
      if (TotalCount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TotalCount);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ItemId = input.ReadInt32();
            break;
          }
          case 16: {
            GainCount = input.ReadInt64();
            break;
          }
          case 24: {
            EndTime = input.ReadInt64();
            break;
          }
          case 32: {
            State = input.ReadInt32();
            break;
          }
          case 40: {
            TotalCount = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求提交装备回收活动物品
  /// </summary>
  public sealed class ReqSubmitRecycleItem : pb::IMessage {
    private static readonly pb::MessageParser<ReqSubmitRecycleItem> _parser = new pb::MessageParser<ReqSubmitRecycleItem>(() => new ReqSubmitRecycleItem());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqSubmitRecycleItem> Parser { get { return _parser; } }

    /// <summary>Field number for the "activityId" field.</summary>
    public const int ActivityIdFieldNumber = 1;
    private int activityId_;
    /// <summary>
    ///活动id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ActivityId {
      get { return activityId_; }
      set {
        activityId_ = value;
      }
    }

    /// <summary>Field number for the "itemLid" field.</summary>
    public const int ItemLidFieldNumber = 2;
    private long itemLid_;
    /// <summary>
    ///装备唯一id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ItemLid {
      get { return itemLid_; }
      set {
        itemLid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ActivityId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ActivityId);
      }
      if (ItemLid != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(ItemLid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ActivityId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ActivityId);
      }
      if (ItemLid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ItemLid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ActivityId = input.ReadInt32();
            break;
          }
          case 16: {
            ItemLid = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed class ReqActivityRankInfo : pb::IMessage {
    private static readonly pb::MessageParser<ReqActivityRankInfo> _parser = new pb::MessageParser<ReqActivityRankInfo>(() => new ReqActivityRankInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqActivityRankInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "activityId" field.</summary>
    public const int ActivityIdFieldNumber = 1;
    private int activityId_;
    /// <summary>
    ///活动id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ActivityId {
      get { return activityId_; }
      set {
        activityId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ActivityId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ActivityId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ActivityId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ActivityId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ActivityId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///活动排行信息
  /// </summary>
  public sealed class ResActivityRankInfo : pb::IMessage {
    private static readonly pb::MessageParser<ResActivityRankInfo> _parser = new pb::MessageParser<ResActivityRankInfo>(() => new ResActivityRankInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ResActivityRankInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "activityId" field.</summary>
    public const int ActivityIdFieldNumber = 1;
    private int activityId_;
    /// <summary>
    ///活动id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ActivityId {
      get { return activityId_; }
      set {
        activityId_ = value;
      }
    }

    /// <summary>Field number for the "info" field.</summary>
    public const int InfoFieldNumber = 2;
    private static readonly pb::FieldCodec<global::ActivityV2.SingleActivityInfo> _repeated_info_codec
        = pb::FieldCodec.ForMessage(18, global::ActivityV2.SingleActivityInfo.Parser);
    private readonly pbc::RepeatedField<global::ActivityV2.SingleActivityInfo> info_ = new pbc::RepeatedField<global::ActivityV2.SingleActivityInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ActivityV2.SingleActivityInfo> Info {
      get { return info_; }
    }

    /// <summary>Field number for the "selfInfo" field.</summary>
    public const int SelfInfoFieldNumber = 3;
    private global::ActivityV2.SingleActivityInfo selfInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ActivityV2.SingleActivityInfo SelfInfo {
      get { return selfInfo_; }
      set {
        selfInfo_ = value;
      }
    }

    /// <summary>Field number for the "levelGoalParam" field.</summary>
    public const int LevelGoalParamFieldNumber = 4;
    private int levelGoalParam_;
    /// <summary>
    ///阶段奖励用
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LevelGoalParam {
      get { return levelGoalParam_; }
      set {
        levelGoalParam_ = value;
      }
    }

    /// <summary>Field number for the "rewardedGoalId" field.</summary>
    public const int RewardedGoalIdFieldNumber = 5;
    private static readonly pb::FieldCodec<int> _repeated_rewardedGoalId_codec
        = pb::FieldCodec.ForInt32(42);
    private readonly pbc::RepeatedField<int> rewardedGoalId_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///已领取过的阶段奖励ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> RewardedGoalId {
      get { return rewardedGoalId_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ActivityId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ActivityId);
      }
      info_.WriteTo(output, _repeated_info_codec);
      if (selfInfo_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(SelfInfo);
      }
      if (LevelGoalParam != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(LevelGoalParam);
      }
      rewardedGoalId_.WriteTo(output, _repeated_rewardedGoalId_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ActivityId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ActivityId);
      }
      size += info_.CalculateSize(_repeated_info_codec);
      if (selfInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SelfInfo);
      }
      if (LevelGoalParam != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LevelGoalParam);
      }
      size += rewardedGoalId_.CalculateSize(_repeated_rewardedGoalId_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ActivityId = input.ReadInt32();
            break;
          }
          case 18: {
            info_.AddEntriesFrom(input, _repeated_info_codec);
            break;
          }
          case 26: {
            if (selfInfo_ == null) {
              selfInfo_ = new global::ActivityV2.SingleActivityInfo();
            }
            input.ReadMessage(selfInfo_);
            break;
          }
          case 32: {
            LevelGoalParam = input.ReadInt32();
            break;
          }
          case 42:
          case 40: {
            rewardedGoalId_.AddEntriesFrom(input, _repeated_rewardedGoalId_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///活动排行详细信息
  /// </summary>
  public sealed class SingleActivityInfo : pb::IMessage {
    private static readonly pb::MessageParser<SingleActivityInfo> _parser = new pb::MessageParser<SingleActivityInfo>(() => new SingleActivityInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SingleActivityInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 1;
    private long roleId_;
    /// <summary>
    ///角色id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 2;
    private int level_;
    /// <summary>
    ///等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "reinLv" field.</summary>
    public const int ReinLvFieldNumber = 3;
    private int reinLv_;
    /// <summary>
    ///转生等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ReinLv {
      get { return reinLv_; }
      set {
        reinLv_ = value;
      }
    }

    /// <summary>Field number for the "rank" field.</summary>
    public const int RankFieldNumber = 4;
    private int rank_;
    /// <summary>
    ///排名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Rank {
      get { return rank_; }
      set {
        rank_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 5;
    private string name_ = "";
    /// <summary>
    ///角色名字
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 6;
    private int value_;
    /// <summary>
    ///当前数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    /// <summary>Field number for the "carrer" field.</summary>
    public const int CarrerFieldNumber = 7;
    private int carrer_;
    /// <summary>
    ///职业
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Carrer {
      get { return carrer_; }
      set {
        carrer_ = value;
      }
    }

    /// <summary>Field number for the "sex" field.</summary>
    public const int SexFieldNumber = 8;
    private int sex_;
    /// <summary>
    ///性别
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Sex {
      get { return sex_; }
      set {
        sex_ = value;
      }
    }

    /// <summary>Field number for the "extraParam" field.</summary>
    public const int ExtraParamFieldNumber = 9;
    private int extraParam_;
    /// <summary>
    ///额外参数(捐献榜时1代表给第一名buff)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ExtraParam {
      get { return extraParam_; }
      set {
        extraParam_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(RoleId);
      }
      if (Level != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Level);
      }
      if (ReinLv != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ReinLv);
      }
      if (Rank != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Rank);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Name);
      }
      if (Value != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Value);
      }
      if (Carrer != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Carrer);
      }
      if (Sex != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(Sex);
      }
      if (ExtraParam != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(ExtraParam);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(RoleId);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (ReinLv != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReinLv);
      }
      if (Rank != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Rank);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Value != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Value);
      }
      if (Carrer != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Carrer);
      }
      if (Sex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Sex);
      }
      if (ExtraParam != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ExtraParam);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoleId = input.ReadInt64();
            break;
          }
          case 16: {
            Level = input.ReadInt32();
            break;
          }
          case 24: {
            ReinLv = input.ReadInt32();
            break;
          }
          case 32: {
            Rank = input.ReadInt32();
            break;
          }
          case 42: {
            Name = input.ReadString();
            break;
          }
          case 48: {
            Value = input.ReadInt32();
            break;
          }
          case 56: {
            Carrer = input.ReadInt32();
            break;
          }
          case 64: {
            Sex = input.ReadInt32();
            break;
          }
          case 72: {
            ExtraParam = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///富豪捐赠
  /// </summary>
  public sealed class Donate : pb::IMessage {
    private static readonly pb::MessageParser<Donate> _parser = new pb::MessageParser<Donate>(() => new Donate());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Donate> Parser { get { return _parser; } }

    /// <summary>Field number for the "donateMoney" field.</summary>
    public const int DonateMoneyFieldNumber = 1;
    private int donateMoney_;
    /// <summary>
    ///捐献数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DonateMoney {
      get { return donateMoney_; }
      set {
        donateMoney_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DonateMoney != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(DonateMoney);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DonateMoney != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DonateMoney);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            DonateMoney = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///膜拜
  /// </summary>
  public sealed class Worship : pb::IMessage {
    private static readonly pb::MessageParser<Worship> _parser = new pb::MessageParser<Worship>(() => new Worship());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Worship> Parser { get { return _parser; } }

    /// <summary>Field number for the "targetId" field.</summary>
    public const int TargetIdFieldNumber = 1;
    private long targetId_;
    /// <summary>
    ///膜拜对象
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TargetId {
      get { return targetId_; }
      set {
        targetId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TargetId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(TargetId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TargetId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TargetId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TargetId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求领开服竞技活动阶段奖励
  /// </summary>
  public sealed class ReqDrawLevelGoalReward : pb::IMessage {
    private static readonly pb::MessageParser<ReqDrawLevelGoalReward> _parser = new pb::MessageParser<ReqDrawLevelGoalReward>(() => new ReqDrawLevelGoalReward());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqDrawLevelGoalReward> Parser { get { return _parser; } }

    /// <summary>Field number for the "goalId" field.</summary>
    public const int GoalIdFieldNumber = 1;
    private int goalId_;
    /// <summary>
    ///goal表ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GoalId {
      get { return goalId_; }
      set {
        goalId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GoalId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(GoalId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GoalId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GoalId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            GoalId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class DonateReward : pb::IMessage {
    private static readonly pb::MessageParser<DonateReward> _parser = new pb::MessageParser<DonateReward>(() => new DonateReward());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DonateReward> Parser { get { return _parser; } }

    /// <summary>Field number for the "currentDonate" field.</summary>
    public const int CurrentDonateFieldNumber = 1;
    private int currentDonate_;
    /// <summary>
    ///当前捐献
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurrentDonate {
      get { return currentDonate_; }
      set {
        currentDonate_ = value;
      }
    }

    /// <summary>Field number for the "lastRank" field.</summary>
    public const int LastRankFieldNumber = 2;
    private int lastRank_;
    /// <summary>
    ///上次排名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LastRank {
      get { return lastRank_; }
      set {
        lastRank_ = value;
      }
    }

    /// <summary>Field number for the "cuuentRank" field.</summary>
    public const int CuuentRankFieldNumber = 3;
    private int cuuentRank_;
    /// <summary>
    ///当前排名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CuuentRank {
      get { return cuuentRank_; }
      set {
        cuuentRank_ = value;
      }
    }

    /// <summary>Field number for the "oldBuff" field.</summary>
    public const int OldBuffFieldNumber = 4;
    private int oldBuff_;
    /// <summary>
    ///原来的buff
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OldBuff {
      get { return oldBuff_; }
      set {
        oldBuff_ = value;
      }
    }

    /// <summary>Field number for the "highRankDonate" field.</summary>
    public const int HighRankDonateFieldNumber = 5;
    private int highRankDonate_;
    /// <summary>
    ///上一名捐献值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HighRankDonate {
      get { return highRankDonate_; }
      set {
        highRankDonate_ = value;
      }
    }

    /// <summary>Field number for the "currentBuff" field.</summary>
    public const int CurrentBuffFieldNumber = 6;
    private int currentBuff_;
    /// <summary>
    ///当前对应buff
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurrentBuff {
      get { return currentBuff_; }
      set {
        currentBuff_ = value;
      }
    }

    /// <summary>Field number for the "rewards" field.</summary>
    public const int RewardsFieldNumber = 7;
    private static readonly pb::FieldCodec<global::ActivityV2.ActivityRewards> _repeated_rewards_codec
        = pb::FieldCodec.ForMessage(58, global::ActivityV2.ActivityRewards.Parser);
    private readonly pbc::RepeatedField<global::ActivityV2.ActivityRewards> rewards_ = new pbc::RepeatedField<global::ActivityV2.ActivityRewards>();
    /// <summary>
    ///奖励
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ActivityV2.ActivityRewards> Rewards {
      get { return rewards_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CurrentDonate != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CurrentDonate);
      }
      if (LastRank != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(LastRank);
      }
      if (CuuentRank != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(CuuentRank);
      }
      if (OldBuff != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(OldBuff);
      }
      if (HighRankDonate != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(HighRankDonate);
      }
      if (CurrentBuff != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(CurrentBuff);
      }
      rewards_.WriteTo(output, _repeated_rewards_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CurrentDonate != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurrentDonate);
      }
      if (LastRank != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LastRank);
      }
      if (CuuentRank != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CuuentRank);
      }
      if (OldBuff != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OldBuff);
      }
      if (HighRankDonate != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HighRankDonate);
      }
      if (CurrentBuff != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurrentBuff);
      }
      size += rewards_.CalculateSize(_repeated_rewards_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            CurrentDonate = input.ReadInt32();
            break;
          }
          case 16: {
            LastRank = input.ReadInt32();
            break;
          }
          case 24: {
            CuuentRank = input.ReadInt32();
            break;
          }
          case 32: {
            OldBuff = input.ReadInt32();
            break;
          }
          case 40: {
            HighRankDonate = input.ReadInt32();
            break;
          }
          case 48: {
            CurrentBuff = input.ReadInt32();
            break;
          }
          case 58: {
            rewards_.AddEntriesFrom(input, _repeated_rewards_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
